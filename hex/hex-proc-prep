#! /bin/tcsh -f
#
# Prepare raw hex-style observations for further analysis by
# flagging and calibrating the data.

#set echo = 1
set newrfiflags = "subint=1"
set calcalflags = "options=sefd,autoref"
set selfcalflags = "options=amp,nosc refant=11 interval=999"

# Make sure the shell environment is set up
source `dirname $0`/hex-lib-checkenv

if ($#argv < 1) then
    set workdir = .
else
    set workdir = $1
endif

if (! -d $workdir/vis00) then
    echo "Error: analysis directory $workdir does not appear to contain any data."
    echo "       (No such directory $workdir/vis00.)"
    exit 1
endif

cd $workdir
set rest = (vis??)
set rest = (${rest[2-]})


# Try to get flux information

set tmp = `mktemp`
python >$tmp <<EOF
from miriad import VisData
t = VisData ("vis00").open ('rw')
t.next ()
print t.getVarString ('source')
t.close ()
EOF
set source = `cat $tmp`

python >$tmp <<EOF
from miriad import VisData
t = VisData ("vis00").open ('rw')
t.next ()
print int (t.getVarDouble ('freq') * 1000)
t.close ()
EOF
set freq = `cat $tmp`

echo "Read source $source, freq $freq"
set flux = `python -m calmodels $source $freq`

if ($status) then
    echo "Error looking up flux, using 1 instead."
    set flux = 1
else
    echo "Found flux = $flux Jy."
endif

cat >data-sinfo.txt <<EOF
source $source
freq $freq
flux $flux
EOF


# Extract coordinate offsets in the data files and load in the RA/Dec
# offsets in arcsec for use with mselfcal

if (! -f data-offsets.txt) then
    hex-lib-calcoffsets vis00 $rest >data-offsets.txt
    if ($status) exit $status
endif

set oras = (`cut -d' ' -f1 <data-offsets.txt |awk '{print $1 * -206265}'`)
set odecs = (`cut -d' ' -f2 <data-offsets.txt |awk '{print $1 * -206265}'`)


# RFI flag everything

foreach vis (vis00 $rest)
    if (! -d $vis/phoenix) then
	echo "RFI sweep dataset $vis"
	echo ">>>>>>>>>>>>>>>>>>>>"
	newrfisweep.csh vis=$vis $newrfiflags
	if ($status) exit $status
	echo "<<<<<<<<<<<<<<<<<<<<"
    endif
end


# Calibrate the on-source pointing

if (-d vis00/gains.xxp) then
    echo "Primary pointing dataset vis00 has already been calibrated"
else
    echo "Calibrating primary pointing dataset vis00"
    echo ">>>>>>>>>>>>>>>>>>>>"
    newcalcal.csh vis=vis00 flux=$flux $calcalflags
    if ($status) exit $status
    echo "<<<<<<<<<<<<<<<<<<<<"
    cp vis00/gains vis00/gains.orig
endif

if (! -f data-calrpt.txt) then
    # TODO: we could crack the calrpt in the same way that we
    # crack the image report. I'm not quite sure why the calrpt
    # contains image info that is slightly different than what's
    # reported in imgrpt.
    cp cal-$source-$freq-maps/calrpt data-calrpt.txt
endif

if (! -f data-imginfo.txt) then
    hex-lib-crack-imgrpt <cal-$source-$freq-maps/imgrpt >data-imginfo.txt
endif


# Propagate the calibration

foreach vis ($rest)
    if (-f $vis/gains) then
	echo "Dataset $vis has been calibrated"
    else
	echo "Calibrating dataset $vis"
	gpcopy vis=vis00 out=$vis
	if ($status) exit $status
    endif
end


# Uvcat into pol-split datasets and selfcal

mkdir -p selfcal-logs
set i = 1

foreach vis (vis00 $rest)
    foreach p (x y)
	if (-d $vis.$p) then
	    echo "Rough-calibrated dataset $vis.$p exists"
	 else
	    uvcat options=unflagged select="pol($p$p),-auto" vis=$vis out=$vis.$p
	    if ($status) exit $status
	endif

	if (-f $vis.$p/gains) then
	    echo "Dataset $vis.$p already self-caled"
	else
	    set offset = ${oras[$i]},${odecs[$i]}
	    mselfcal vis=$vis.$p flux=$flux offset=$offset $selfcalflags |tee selfcal-logs/$vis.$p
	    if ($status) exit $status
	endif
    end

    @ i = $i + 1
end


# Extract SEFD data

if (! -f data-sefd.txt) then
    cp vis00/sefd data-sefd.txt
endif


# Extract antenna gains normalized to 1 at pointing center and uncerts

if (! -f data-relgains.txt) then
    hex-lib-extractgains -s vis00 $rest >data-relgains.txt
    if ($status) exit $status
endif

if (! -f data-relgainerrs.txt) then
    set gefiles = ()
    set oras = (`cut -d' ' -f1 <data-offsets.txt`)
    set odecs = (`cut -d' ' -f2 <data-offsets.txt`)
    set i = 1

    mkdir -p gainerrs

    foreach vis (vis00 $rest)
	hex-lib-calcgainerr $vis.x $vis.y $flux $oras[$i] $odecs[$i] gainerrs/$vis.rel
	set gefiles = ($gefiles gainerrs/$vis.rel)
	@ i = $i + 1
    end

    hex-lib-mergegainerrtables $gefiles >data-relgainerrs.txt
endif
    
# Extract absolute antenna gains at the pointing center and uncerts

if (! -f data-absgains.txt) then
    hex-lib-extractgains -j vis00 >data-absgains.txt
    if ($status) exit $status
endif

if (! -f data-absgainerrs.txt) then
    hex-lib-calcgainerr vis00 $flux 0 0 data-absgainerrs.txt
endif

# TODO: extract closure information of primary pointing.

exit 0
