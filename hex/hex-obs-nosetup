#! /bin/tcsh -f
#
# Conduct a hex7-like observation of the specified coordinates without
# performing any setup of the correlator hardware or antennas -- it is
# assumed that the desired hardware settings have been applied by
# whoever is invoking this script. This is a lower-level script that
# should not usually be run directly by users.
#
# Usage is: 
#
# hex-obs-nosetup INST1 INST2 COORDFN OUTPFX SOURCE DURSEC ABORTHR
#
# where the arguments are: 
# 
# INST1 - a correlator instrument and subarray, e.g. fx64a:fxa
# INST2 - a second instrument and subarray, e.g. fx64c:fxa
# COORDFN - the name of a file containing a list of RA and Dec 
#   coordinates to point at. Should be generated by one of the
#   hex-coord-* commands; this is usually done automatically 
#   by one of the higher-level scripts (e.g. hex-obs-single)
# OUTPFX - a prefix given to the names of all major output files
#   created by the script.
# SOURCE - the name of the source at the primary pointing. This is
#   used to set the source name reported in atastatus and the
#   'source' UV variable (via the names of the ephemeris files that
#   are generated). The source name for the first pointing
#   is precisely SOURCE, and for the rest it is SOURCE-pN, where N
#   is the number of the pointing with the first pointing being
#   number zero.
# DURSEC - the duration of each scan, in seconds
# ABORTHR - a local fractional hour (e.g. 23.25 = 11:15 PM) at which
#   to abort the observation, or "-" to ignore timing. Should be 
#   specified if you're running a script that has to be over at a
#   certain stop time.
#
# The observing frequencies and bandwidths are probed from the current
# state of the hardware. Only the antennas associated with $inst1 are
# moved; it is assumed that $inst2 includes no antennas not in $inst1.
#
# If a pointing in the pattern isn't visible, it will be skipped but
# the rest of the pointings will be attempted.
#
# The coordinates file should consist of a sequence of floating point
# numbers in text. If there are 2N numbers total, the first N numbers
# are RAs in hours and the next N are the declinations in degrees. The
# first RA and dec are taken to specify the central pointing.
#
# The outputs created by the script are:
#
# $outpfx-main.log - the main logfile
# $outpfx-track.log - log of the output of atatrackephem commands
# $outpfx-p$n-fx$c1.log - log of the output of the inst1 'atafx'
#    process for the n'th pointing; n starts at zero. $c1 is the 
#    identifying letter of the $inst1 correlator.
# $outpfx-p$n-fx$c2.log - Analogous to the above
# $outpfx-p$n-$freq1$c1 - Miriad data file for the observations of the
#    n'th pointing on the first instrument
# $outpfx-p$n-$freq2$c2 - Miriad data file for the observations of the
#    n'th pointing on the second instrument
# $outpfx-summ-$freq1$c1-$time.hexsumm - "hex summary" file listing the data
#    files corresponding to this observing run on the first instrument. 
#    $time is the current local time formatted as HH:MM:SS; it is used 
#    to prevent filename clashes between multiple hex summary files if
#    more than one observation with the same setup is run in a single
#    directory.
# $outpfx-summ-$freq2$c2-$time.hexsumm - Analogous to the above. The value of
#    $time is not guaranteed to be identical to that of the previous
#    file, but in practice it almost always will be. You shouldn't
#    ever find yourself relying on that fact, though.
#
# Several standard miscellanous logfiles are created by scripts invoked
# by this program as well:
#
# $source.ephem - ephemeris file for the main pointing
# $source-p$n.ephem - ephemeris files for the other pointings.
# frot.$instN.err - errors reported by the fringe rotator for $instN
# frotctrl.$instN.log - log of fringe rotator control commands
# frot.$instN.log - log of fringe rotator information
# sourcefile.frot - temp file
# fx64 - temp file
# fx64.list - temp file
# spolist - temp file
# antpols - temp file
#
# Change history:
#
# 2008/08/08 JRF  single-cal script runs Gerry & David's catchers together
# 2008/08/11 JRF  uses new call to frot.csh to kill or start frot.rb on strato
# 2008/11/20 JRF  modified to accept instrument:group for corr a,b,c,d
# 2008/11/25 JRF  removed calls to atasetpams, atalnaon
# 2008/12/02 JRF  removed frot stop, moved kill to finish. using getintfx($inst)
# 2009/04/06 DHEM Modified for dual freq usage.
# 2009/03/10 DHEM Modified from scanfx.csh to do a hex7 pattern
# 2009/08/20 CJL  Modified naming convention.  now location index specified 
#    with 'hp' for 'half power'
# 2009/09/09 DHEM Put phase and delay center at each pointing center instead 
#    of always at center of central pointing
# 2009/09/23 PKGW Derived from hex7fx.csh, reworked extensively.

# uncomment to debug the commands being run by this script
#set echo = 1
set me = hex-obs-nosetup:


# Arguments

if ($#argv == 7) then
  set flt = ($argv)
else
  echo "Enter: Inst1:grp1 Instr2:grp2 Coords    Outpfx Source Duration(sec) AbortHr"
  echo "E.g.:  fx64a:fxa  fx64c:fxa   hex48.txt hex48  3c48   60            -"
  set flt = ($<)
endif

set inst1 = $flt[1]
set inst2 = $flt[2]
set coordfn = $flt[3]
set outpfx = $flt[4]
set source = $flt[5]
set dur = $flt[6]
set aborthr = $flt[7]

if (`echo $inst1 | grep ':'` == '') then
    echo "Error: must include first instrument and group separated by a colon. Exiting!"
    exit 1
endif

if (`echo $inst2 | grep ':'` == '') then
    echo "Error: must include second instrument and group separated by a colon. Exiting!"
    exit 1
endif

if (! -e $coordfn) then
    echo "Error: coordinates file $coordfn does not exist. Exiting!"
    exit 1
endif

set log = $outpfx-main.log
echo "$me starting at `date`" |& tee -ia $log
echo "$me args $flt" |& tee -ia $log

# Initialize misc. shell variables

set switch="`cat /home/obs/bin/genswitch`"
# we drive only the ants in $inst1 -- it is assumed that $inst2 contains
# the same antennas. We should take their union.
set alist1 = `slist.csh $inst1`
set alist2 = `slist.csh $inst2`

if ($%alist1 == 0) then
    echo "$me error: no antennas in instrument $inst1" |& tee -ia $log
    exit 1
endif

if ($%alist2 == 0) then
    echo "$me error: no antennas in instrument $inst2" |& tee -ia $log
    exit 1
endif

spolist.csh $inst1 # makes list of antpols in file 'antpols'
set antpols1 = `cat antpols`
spolist.csh $inst2
set antpols2 = `cat antpols`

# isolate letters identifying correlators, e.g. 'fx64a' -> 'a'
set ic1 = `echo $inst1 | cut -d: -f1 | gawk -F '' '{print ($NF)}'`
set ic2 = `echo $inst2 | cut -d: -f1 | gawk -F '' '{print ($NF)}'`

set durhr = `echo $dur |awk '{print ($1/3600) + 0.05}'`

set begin = `date +"%H %M" |awk '{print $1 + $2 / 60 - 0.05}'`

set checkabort = 0
if ($aborthr != -) then
    set checkabort = 1
    # Leave time for an integration of $dur seconds, including the atafx
    # overhead, which is about 40 seconds = 0.01111 hr
    set aborthr = `echo $aborthr $dur |awk '{print $1 - $2 / 3600 - 0.015}'`
endif


# Load coordinates

set radecs = (`cat $coordfn`)
@ npnt = $#radecs / 2
@ npntp1 = $npnt + 1
@ npntt2 = $npnt * 2

if ($npntt2 != $#radecs) then
    echo "Error: uneven number of coordinates in input file!?"
    exit 1
endif

set ras = ($radecs[1-$npnt])
set decs = ($radecs[$npntp1-$npntt2])


# Determine freq and BW settings

set lo1 = `fxconf.rb hookup $inst1 |grep LO |sed -e 's/.*,\([abcd]\)[1234].*/\1/'`
set freq1 = `atagetskyfreq $lo1`
set freq1 = `python -c "print int (round ($freq1))"`

set lo2 = `fxconf.rb hookup $inst2 |grep LO |sed -e 's/.*,\([abcd]\)[1234].*/\1/'`
set freq2 = `atagetskyfreq $lo2`
set freq2 = `python -c "print int (round ($freq2))"`

set bws = (104.8576 52.4288 26.2144 13.1072 6.5536 3.2768)

set fx1 = `echo $inst1 |cut -d: -f1 |sed -e s/64//`
set bw1 = `ibob i1.$fx1 regread bwsel |cut -c9`
@ bw1 = $bw1 + 1
set bw1 = $bws[$bw1]

set fx2 = `echo $inst2 |cut -d: -f1 |sed -e s/64//`
set bw2 = `ibob i1.$fx2 regread bwsel |cut -c9`
@ bw2 = $bw2 + 1
set bw2 = $bws[$bw2]


# Set up for logging this session to the summary files
# that tell the automated tools about this particular session

set n = 0

while (1)
    set summfile1 = $outpfx-summ-$freq1$ic1-`date +%H:%M:%S`.hexsumm
    set summfile2 = $outpfx-summ-$freq2$ic2-`date +%H:%M:%S`.hexsumm
    if (! -f $summfile1 && ! -f $summfile2) break
    if ($n > 9) then
	echo "$me: fatal error: can't come up with new summary file names?!"
	exit 1
    endif
    sleep 1
    @ n = $n + 1
end

echo tstart `date -u +%y%b%d:%H:%M:%S.0` >$summfile1
echo nfull $npnt >>$summfile1
echo tstart `date -u +%y%b%d:%H:%M:%S.0` >$summfile2
echo nfull $npnt >>$summfile2


# Run the observations

echo "$me inst1 $inst1 freq $freq1 bw $bw1" |& tee -ia $log
echo "$me inst2 $inst2 freq $freq2 bw $bw2" |& tee -ia $log
echo "$me ras $ras" |& tee -ia $log
echo "$me decs $decs" |& tee -ia $log

set vpnt = none # no "undefined variable" error if we goto fail
set ephem = none
set nok = 0
onintr fail

foreach pnt (`seq 1 $npnt`)
    @ pnt0 = $pnt - 1

    set vpnt = $outpfx-p$pnt0
    set vpf1 = $vpnt-$freq1$ic1
    set vpf2 = $vpnt-$freq2$ic2
    set ra = $ras[$pnt]
    set dec = $decs[$pnt]

    if (`sourceup.csh $ra $dec $durhr |grep ok` != ok) then
	echo "WARNING: pointing $pnt0 ($ra, $dec) not visible" |& tee -ia $log
	continue
    endif

    if ($checkabort) then
	if (`stopnow.csh $begin $aborthr` == stop) then
	    echo "WARNING: hit abort hour, canceling observations!" |& tee -ia $log
	    break
	endif
    endif

    if ($pnt0 == 0) then
	set ephem = $source.ephem
    else
	set ephem = $source-p$pnt0.ephem
    endif

    echo "$me putting ephem in $ephem ..." |& tee -ia $log
    ataephem --radec "$ra,$dec" --duration 1 --utcms --stdout >! $ephem
    atawrapephem $ephem

    echo "$me starting fringe rotators ..." |& tee -ia $log
    frot.csh $inst1 $ephem $freq1 `pwd` start
    frot.csh $inst2 $ephem $freq2 `pwd` start

    echo "$me pointing $alist1" |& tee -ia $log
    echo "-- atatrackephem $alist1 $ephem -w" |& tee -ia $outpfx-track.log
    echo "--   at: `date`" |& tee -ia $outpfx-track.log
    atatrackephem $alist1 $ephem -w |& tee -ia $outpfx-track.log

    # Run the catchers!
    echo "$me launching catchers at `date`" |& tee -ia $log
    echo "$me atafx $vpf1 $antpols1 $inst1 $ephem -duration $dur -bw $bw1 $switch" |& tee -ia $log
    echo "$me atafx $vpf2 $antpols2 $inst2 $ephem -duration $dur -bw $bw2 $switch" |& tee -ia $log
    set tstart = `date -u +%y%h%d:%H:%M:%S`
    (atafx $vpf1 $antpols1 $inst1 $ephem -duration $dur -bw $bw1 $switch |& tee -ia $vpnt-fx$ic1.log) &
    atafx $vpf2 $antpols2 $inst2 $ephem -duration $dur -bw $bw2 $switch |& tee -ia $vpnt-fx$ic2.log
    wait
    set tend = `date -u +%y%h%d:%H:%M:%S`
    echo "$me catchers finished at `date`" |& tee -ia $log

    echo "$me killing fringe rotators ..." |& tee -ia $log
    frot.csh $inst1 $ephem $freq1 `pwd` kill
    frot.csh $inst2 $ephem $freq2 `pwd` kill

    # Notify COMPASS if we just did the central pointing
    if ($pnt == 1) then
	echo "compass `pwd`/$vpf2 $tstart $tend $inst2" > ~/karto/compass.log
    endif

    # Note these observations in the summary files
    echo scan `printf %02d $pnt0` $vpf1 >>$summfile1
    echo scan `printf %02d $pnt0` $vpf2 >>$summfile2
    @ nok = $nok + 1
end

if ($nok == 0) then
    echo "$me didn't observe any pointings!" |& tee -ia $log
    goto fail
endif

# Close out the summary files -- lack of a 'success' entry
# implies that observing crashed or aborted 
echo tend `date -u +%y%b%d:%H:%M:%S.0` >>$summfile1
echo success 1 >>$summfile1
echo tend `date -u +%y%b%d:%H:%M:%S.0` >>$summfile2
echo success 1 >>$summfile2

# Notify the hex auto-reduction software that there's work
# to be done.
echo `pwd`/$summfile1 >/ataarchive/scratch/hexproc/notify/`date -u +%y%m%d-%H%M%S`-$$-`hostname`-1
echo `pwd`/$summfile2 >/ataarchive/scratch/hexproc/notify/`date -u +%y%m%d-%H%M%S`-$$-`hostname`-2

echo "$me ended successfully at `date`" |& tee -ia $log
exit 0

fail:
echo "$me aborting" |& tee -ia $log

# Try to close out the summary files -- may be helpful
# for recovering if most of the observation is still usable
echo tend `date -u +%y%b%d:%H:%M:%S.0` >>$summfile1
echo tend `date -u +%y%b%d:%H:%M:%S.0` >>$summfile2

# Still notify the auto-reduction software so that the
# attempted observation is remembered.
echo `pwd`/$summfile1 >/ataarchive/scratch/hexproc/notify/`date -u +%y%m%d-%H%M%S`-$$-`hostname`-1
echo `pwd`/$summfile2 >/ataarchive/scratch/hexproc/notify/`date -u +%y%m%d-%H%M%S`-$$-`hostname`-2

# Kill rotators just in case
frot.csh $inst1 $ephem $freq1 `pwd` kill
frot.csh $inst2 $ephem $freq2 `pwd` kill
echo "$me ended in failure at `date`" |& tee -ia $log
exit 1
