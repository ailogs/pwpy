#! /usr/bin/env python
# -*- python -*-
#
# Plot the 2D gaussian fits to the primary beam shapes.

import sys
from os.path import join
import omega as O
import numpy as N

if len (sys.argv) < 2:
    analysisdir = '.'
else:
    analysisdir = sys.argv[1]
    del sys.argv[1]


# Load in data

data = {}

for l in file (join (analysisdir, 'data-gaussfits.txt')):
    a = l.split ()
    ant = int (a[0])
    pol = a[1]

    if a[3] == '0':
        # Fit failed
        continue

    d = N.asarray ([float (x) for x in a[4:]])

    if ant not in data:
        data[ant] = {}

    data[ant][pol] = d

ghz = None

for l in file (join (analysisdir, 'data-sinfo.txt')):
    a = l.strip ().split ()

    if a[0] == 'freq':
        ghz = float (a[1]) * 1e-3

assert ghz is not None, 'Bad sinfo file, no source name?'

for pdata in data.itervalues ():
    for d in pdata.itervalues ():
        d[7:11] *= 3600 # deg. to arcsec

# Display
    
pg = O.quickPager (sys.argv[1:])
rad = N.linspace (0, 2 * N.pi, 100)
hwhm = 1.75 / ghz * 3600
_styles = {'x': 1, 'y': 2}

for ant in sorted (data.iterkeys ()):
    pdata = data[ant]

    print 'Antenna', ant

    p = O.RectPlot ()

    # Theory
    p.addXY (N.cos (rad) * hwhm, N.sin (rad) * hwhm, 'PB Model').dsn = 0

    # Fit results
    for pol in 'xy':
        if pol not in pdata: continue

        d = pdata[pol]
        amp, x0, y0, xhwhm, yhwhm = d[1::2]

        print '   ', pol, 'rchisq:', d[0]

        x = x0 + N.cos (rad) * xhwhm
        y = y0 + N.sin (rad) * yhwhm

        p.addXY (x, y, 'Pol ' + pol).dsn = _styles[pol]

        # Crosshair
        bx = 0.1 * xhwhm
        by = 0.1 * yhwhm
        p.addXY ([x0 - bx, x0 + bx], [y0, y0], None).dsn = _styles[pol]
        p.addXY ([x0, x0], [y0 - by, y0 + by], None).dsn = _styles[pol]
        

    # Center on 0, 0
    b = N.abs (p.defaultField.xaxis.min)
    b = max (b, N.abs (p.defaultField.xaxis.max))
    b = max (b, N.abs (p.defaultField.yaxis.min))
    b = max (b, N.abs (p.defaultField.yaxis.max))
    p.setBounds (-b, b, -b, b)

    # Add a little central crosshair
    b /= 10
    p.addXY ([-b, b], [0, 0], None, rebound=False).dsn = 0
    p.addXY ([0, 0], [-b, b], None, rebound=False).dsn = 0

    p.addKeyItem ('Antenna %d' % ant)
    p._toplevel_render_aspect = 1.

    pg.send (p)

pg.done ()
