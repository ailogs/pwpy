#! /usr/bin/tcsh -f

onintr enderr

set datapath = "/home/obs/mmm/karto/cals"
set target
set debug = 0
set freq
set flux = (0 0)
set mode = info
set dwflux = 1
set dwdist = 1
set dwtime = 1
set ra = 0
set dec = 0
set pi = 3.14159265
set distlim = $pi
set auto = 0
set calgrade
set addflux
set altname
set up = 0

if ($#argv == 0) then
    echo "example: calinfo target=3c147 freq=1.628"
    echo "Documentation to follow..."
    exit 0
endif

varassign:

if ("$argv[1]" =~ 'target='*) then
    set target = `echo $argv[1] | sed 's/target=//' | tr '[a-z]' '[A-Z]'`
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'freq='*) then
    set freq = `echo $argv[1] | sed 's/freq=//' | awk '{print int($1*1000)}'`
    if ($freq < 300 || $freq > 15000) then
	echo "FATAL ERROR: Bad entry for freq (should be in GHz)"
	exit 1
    endif
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'radec='*) then
    set ra  = `echo $argv[1] | sed 's/radec=//' | tr ',' ' ' | awk '{print $1}' | tr ':' ' ' | awk '{print (1*$1+($2/60)+($3/3600))*pi/12}' pi=$pi`
    set dec  = `echo $argv[1] | sed 's/radec=//' | tr ',' ' ' | awk '{print $2}' | tr ':' ' ' | awk '{print (1*$1+($2/60)+($3/3600))*pi/180}' pi=$pi`
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'distlim='*) then
    set distlim = `echo $argv[1] | sed 's/distlim=//' | awk '{print ($1*1)*pi/180}' pi=$pi`
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'flux='*) then
    set flux = (`echo $argv[1] | sed 's/flux=//' | awk '{if ($1*1 < 0 || $2*1 < 0) print 1,1; else print $1*1,$2*1}'`)
    if ("$flux[1]" == "$flux[2]" && "$flux[1]" != "0") then
	echo "FATAL ERROR: Invalid flux range"
    endif
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'altname='*) then
    set altname = `echo $argv[1] | sed 's/altname=//' | tr '[a-z]' '[A-Z]'`
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'addflux='*) then
    set addflux = `echo $argv[1] | sed 's/addflux=//' | awk '{print $1*1}'`
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'target='*) then
    set target = `echo $argv[1] | sed 's/target=//' | tr '[a-z]' '[A-Z]'`
    shift argv; if ("$argv" == "") set argv = "finish"
else if ("$argv[1]" =~ 'options='*) then
    set options = `echo "$argv[1]" | sed 's/options=//g' | tr ',' ' ' | tr '[A-Z]' '[a-z]'`
    set badopt
    foreach option (`echo $options`)
	if ($option == "debug") then
	    set debug = 1
	else if ($option == "info") then
	    set mode = info
	else if ($option == "find") then
	    set mode = find
	else if ($option == "best") then
	    set mode = best
	else if ($option == "modify") then
	    set mode = modify
	else if ($option == "dwflux") then
	    set dwflux = 0
	else if ($option == "dwdist") then
	    set dwdist = 0
	else if ($option == "dwtime") then
	    set dwtime = 0
	else if ($option == "auto") then
	    set auto = 1
	else if ($option == "up") then
	    set up = 1
	else
	    set badopt = ($badopt $option)
	endif
    end
    if ("$badopt" != "") echo 'options='`echo $badopt | tr ' ' ','`' not recognized!'
    shift argv; if ("$argv" == "") set argv = "finish"
else
    echo "FATAL ERROR: $argv[1] not recognized..."
    exit 1
endif

if ("$argv[1]" != "finish") goto varassign

set wd = (`mktemp -d cal3XXXXX`)

if !( -e $wd) then
    echo "FATAL ERROR: Unable to create working directory, please make sure that you have read/write permissions for this area."
    exit 1
endif

if ($mode == "info") goto infocal
if ($mode == "find") goto findcal
if ($mode == "best") goto bestcal
if ($mode == "modify") goto modcal


################################################################

infocal:

if ("$target" == "" && "$altname" == "") then
    echo "FATAL ERROR: No target specified!"
    goto enderr
endif

if ("$target" == "") then
    set target = $altname
endif


awk '{if ($1 == target || $2 == target) print $0}' target=$target $datapath/calsdata | sort -nk7 > $wd/calinfo

if !(`wc -l $wd/calinfo | awk '{print $1}'`) then
    echo "FATAL ERROR: Target not found."
    goto enderr
endif

if ("$freq" == "") then
    set altcaldata = (`head -n 1 $wd/calinfo | awk '{print $1,$2,$3,$4}'`)
    echo "Source: $altcaldata[1] (altname=$altcaldata[2])"
    echo "        RA="`echo $altcaldata[3] | awk '{printf "%2d:%2d:%2d.%1d\n",int($1),int($1*60)%60,int($1*3600)%60,int(100*(($1*3600)%1))}' | sed 's/ /0/g'`"  Dec="`echo $altcaldata[4] | awk '{printf "%2d:%2d:%2d.%1d\n",int($1),int($1*60)%60,int($1*3600)%60,int(100*(($1*3600)%1))}' | sed 's/ /0/g'`
    echo ""
    if (`wc -l $wd/calinfo | awk '{print $1}'` == 1) then
	head -n 1 $wd/calinfo | awk '{printf "        Flux: %s Jy @ %s GHz (specindex UNK)\n        Additional field flux: %s Jy @ %s GHz\n",$5,$7/1000,$8,$7/1000}'
    else
	set lim = `wc -l $wd/calinfo | awk '{print $1}'`
	set linemark = 2
	set preline = 1
	set postline = 3
	set fluxinfo = (`sed -n 1,2p $wd/calinfo | awk '{if (NR == 1) {fl1 = $5; fr1 = $7; af1=$8}; if (NR == 2) {fl2 = $5; fr2 = $7}} END {print fl1,fr1/1000,log(fl1/fl2)/log(fr1/fr2),af1}'`)
	echo "        Flux: $fluxinfo[1] Jy "'@'" $fluxinfo[2] GHz (specindex="`echo $fluxinfo[3] | awk '{print .001*int(($1*1000)+.5)}'`")"
	echo "        Additional field flux: $fluxinfo[4] Jy "'@'" $fluxinfo[2] GHz"
	while ($lim >= $postline)

	    set fluxinfo = (`sed -n {$preline},{$postline}p $wd/calinfo | awk '{if (NR == 1) {fl1 = $5; fr1 = $7}; if (NR == 2) {fl2 = $5; fr2 = $7; af2 = $8}; if (NR == 3) {fl3 = $5; fr3 = $7}} END {sidx1 = log(fl1/fl2)/log(fr1/fr2); sidx2 = log(fl2/fl3)/log(fr2/fr3); sfr1 = exp((log(fr1)+log(fr2))/2); sfr2 = exp((log(fr2)+log(fr3))/2); sidx = ((sidx1*log(fr2/sfr1))+(sidx2*log(sfr2/fr2)))/(log(sfr2/sfr1)); print fl2,fr2/1000,sidx,af2}'`)
	    echo "        Flux: $fluxinfo[1] Jy "'@'" $fluxinfo[2] GHz (specindex="`echo $fluxinfo[3] | awk '{print .001*int(($1*1000)+.5)}'`")"
	    echo "        Additional field flux: $fluxinfo[4] Jy "'@'" $fluxinfo[2] GHz"
	    @ preline++ postline++ linemark++
	end
	if ($lim != 2) then
	    set fluxinfo = (`sed -n {$preline},{$linemark}p $wd/calinfo | awk '{if (NR == 1) {fl1 = $5; fr1 = $7}; if (NR == 2) {fl2 = $5; fr2 = $7; af2=$8}} END {print fl2,fr2/1000,log(fl1/fl2)/log(fr1/fr2),af2}'`)
	    echo "        Flux: $fluxinfo[1] Jy "'@'" $fluxinfo[2] GHz (specindex="`echo $fluxinfo[3] | awk '{print .001*int(($1*1000)+.5)}'`")"
	    echo "        Additional field flux: $fluxinfo[4] Jy "'@'" $fluxinfo[2] GHz"
	endif
    endif
    goto finish
endif

set linemark = `awk '{print NR,(($7-freq)^2)^.5}' freq=$freq $wd/calinfo | sort -nk2 | head -n 1 | awk '{print $1}'`
set preline = `echo $linemark | awk '{print $1-1}'`
set postline = `echo $linemark | awk '{print $1+1}'`
set altcaldata = (`sed -n {$linemark}p $wd/calinfo | awk '{print $1,$2,$3,$4}'`)
if ($linemark == 1) then
    if (`wc -l $wd/calinfo | awk '{print $1}'` == 1) then
	set fluxinfo = (`head -n 1 $wd/calinfo | awk '{print $5,$7/1000,"NA",$8}'`)
    else
	set fluxinfo = (`sed -n 1,2p $wd/calinfo | awk '{if (NR == 1) {fl1 = $5; fr1 = $7; af1=$8}; if (NR == 2) {fl2 = $5; fr2 = $7; af2=$8}} END {sfr = exp((log(fr1)+log(fr2))/2); if (freq <= sfr) {reffreq = fr1; refflux = fl1; aflux=af1}; if (freq > sfr) {reffreq = fr2; refflux = fl2; aflux = af2}; print refflux,reffreq/1000,log(fl1/fl2)/log(fr1/fr2),aflux}' freq=$freq`)
    endif
else if ($linemark == `wc -l $wd/calinfo | awk '{print $1}'`) then
    set fluxinfo = (`sed -n {$preline},{$linemark}p $wd/calinfo | awk '{if (NR == 1) {fl1=$5; fr1 = $7; af1 = $8}; if (NR == 2) {fl2 = $5; fr2 = $7; af2 = $8}} END {sfr = exp((log(fr1)+log(fr2))/2); if (freq <= sfr) {reffreq = fr1; refflux = fl1; aflux = af1}; if (freq > sfr) {reffreq = fr2; refflux = fl2; aflux = af2}; print refflux,reffreq/1000,log(fl1/fl2)/log(fr1/fr2),aflux}' freq=$freq`)
else
    set fluxinfo = (`sed -n {$preline},{$postline}p $wd/calinfo | awk '{if (NR == 1) {fl1=$5; fr1 = $7; af1 = $8}; if (NR == 2) {fl2 = $5; fr2 = $7; af2 = $8}; if (NR == 3) {fl3=$5; fr3 = $7; af3 = $8}} END {sidx1 = log(fl1/fl2)/log(fr1/fr2); sidx2 = log(fl2/fl3)/log(fr2/fr3); sfr1 = exp((log(fr1)+log(fr2))/2); sfr2 = exp((log(fr2)+log(fr3))/2); if (freq <= sfr1) {sidx = sidx1; reffreq = fr1; refflux = fl1; aflux = af1}; if (freq >= sfr2) {sidx = sidx2; reffreq = fr3; refflux = fl3; aflux = af2} ; if (freq > sfr1 && freq < sfr2) {sidx = ((sidx1*log(freq/sfr1))+(sidx2*log(sfr2/freq)))/(log(sfr2/sfr1)); reffreq = fr2; refflux = fl2; aflux = af3}; print refflux,reffreq/1000,sidx,aflux}' freq=$freq`)
endif

if ($auto) then
    echo $fluxinfo[1-3] $altcaldata $fluxinfo[4]
else
    echo "Source: $altcaldata[1] (altname=$altcaldata[2])"
    echo "        RA="`echo $altcaldata[3] | awk '{printf "%2d:%2d:%2d.%1d\n",int($1),int($1*60)%60,int($1*3600)%60,int(100*(($1*3600)%1))}' | sed 's/ /0/g'`"  Dec="`echo $altcaldata[4] | awk '{if ($1 < 0) print $1,1; else print $1}' | tr -d '-' | awk '{ mark = "+" ; if ($2) mark = "-"; printf "%s%2d:%2d:%2d.%1d\n",mark,int($1),int($1*60)%60,int($1*3600)%60,int(100*(($1*3600)%1))}' | sed 's/ /0/g'`
    echo "        Flux: $fluxinfo[1] Jy "'@'" $fluxinfo[2] GHz (specindex="`echo $fluxinfo[3] | awk '{print .001*int(($1*1000)+.5)}'`")"
    echo "        Estimated flux: "`echo $fluxinfo[1-3] $freq | awk '{if ($3 == "NA") print $1; else print .001*int(1000*((.001*$4/$2)^$3)*$1+.5)}'`" Jy @ "`echo $freq | awk '{print $1/1000}'`" GHz" 
    echo "        Additional field flux: $fluxinfo[4] Jy "'@'" $fluxinfo[2] GHz"
endif

goto finish

################################################################

findcal:

if ("$freq" == "") then
    echo "FATAL ERROR: No frequency specified!"
    goto enderr
endif

if ("$flux[2]" == 0) then
    set cals = (`awk '{print $1,$2,$3,$4,$5,$7}' $datapath/calsdata | awk '{if (cos(distlim) <= (sin($4*pi/180)*sin(dec)+cos($4*pi/180)*cos(dec)*cos(ra-($3*pi/12))) && $5 >= f1) print $1}' ra=$ra dec=$dec pi=$pi distlim=$distlim f1=$flux[1] | sort -u`)
else
    set cals = (`awk '{print $1,$2,$3,$4,$5,$7}' $datapath/calsdata | awk '{if (cos(distlim) <= (sin($4*pi/180)*sin(dec)+cos($4*pi/180)*cos(dec)*cos(ra-($3*pi/12))) && $5 >= f1 && $5 <= f2) print $1}' ra=$ra dec=$dec pi=$pi distlim=$distlim f1=$flux[1] f2=$flux[2] | sort -u`)
endif

if ("$cals[1]" == "") then
    echo "No sources found."
    goto finish
endif

set idx 
set freq = `echo $freq | awk '{print $1/1000}'`
foreach pcal ($cals)
    set calvals = (`calinfo target=$pcal freq=$freq options=auto`)
    if (("$calvals[3]" == "NA" && `echo $freq $calvals[2] | awk '{if ((1-($1/$2))^2 < .0625) print 1; else print 0}'` && (`echo $calvals[1] | awk '{if ($1 >= f1 && ($1 <= f2 || f2 == 0)) print 1; else print 0}' f1=$flux[1] f2=$flux[2]`)) || ("$calvals[3]" != "NA" && (`echo $calvals[1-3] | awk '{if (((freq/$2)^$3)*$1 >= f1 && (((freq/$2)^$3)*$1 <= f2 || f2 == 0)) print 1; else print 0}' freq=$freq f1=$flux[1] f2=$flux[2]`))) then
	echo "Source: $calvals[4] (altname=$calvals[5])"
	echo "        RA="`echo $calvals[6] | awk '{printf "%2d:%2d:%2d.%1d\n",int($1),int($1*60)%60,int($1*3600)%60,int(100*(($1*3600)%1))}' | sed 's/ /0/g'`"  Dec="`echo $calvals[7] | awk '{if ($1 < 0) print $1,1; else print $1}' | tr -d '-' | awk '{ mark = "+" ; if ($2) mark = "-"; printf "%s%2d:%2d:%2d.%1d\n",mark,int($1),int($1*60)%60,int($1*3600)%60,int(100*(($1*3600)%1))}' | sed 's/ /0/g'`
	echo "        Flux: $calvals[1] Jy "'@'" $calvals[2] GHz (specindex=$calvals[3])"
	echo "        Estimated flux: "`echo $calvals[1-3] $freq | awk '{if ($3 == "NA") print $1; else print .001*int(1000*(($4/$2)^$3)*$1+.5)}'`" Jy @ $freq GHz" 
	echo "        Additional field flux: $calvals[8] Jy "'@'" $calvals[2] GHz"
echo ""
	@ idx++
    endif
end

if !($idx) echo "No sources found"

goto finish

################################################################

bestcal:

goto finish

################################################################

modcal:

if ("$target" == "" && "$altname" == "") then
    echo "FATAL ERROR: Target name not specified"
    goto enderr
else if ("$freq" == "") then
    echo "FATAL ERROR: Frequency not specified"
    goto enderr
endif

set ra = `echo $ra | awk '{print $1*180/pi}' pi=$pi`
set dec = `echo $dec | awk '{print $1*180/pi}' pi=$pi`

if ("$target" == "") then
    set target = `awk '{if ($2 == altname) print $1}' altname=$altname $datapath/calsdata | head -n 1`
    if ("$target" == "") then
	set target = $altname
	set altname = `awk '{if ($1 == target) print $2}' target=$target $datapath/calsdata | head -n 1`
    endif
else if ("$altname" == "") then
    set altname = `awk '{if ($1 == target) print $2}' target=$target $datapath/calsdata | head -n 1`
    if ("$altname" == "") then
	set altname = $target
	set target = `awk '{if ($2 == altname) print $1}' altname=$altname $datapath/calsdata | head -n 1`
    endif
endif

if ("$altname" == "" || "$target" == "") then
    echo "FATAL ERROR: Target requies an 'altname' and 'target' name specification"
    goto enderr
endif

if ("$ra" == 0 && "$dec" == 0)  then
    set ra = `awk '{if ($1 == target) print $3}' target=$target $datapath/calsdata | head -n 1`
    set dec = `awk '{if ($1 == target) print $4}' target=$target $datapath/calsdata | head -n 1`
endif

if ("$ra" == "" && "$dec" == "")  then
    echo "FATAL ERROR: Source requires an RA/Dec specification."
    goto enderr
endif

if ("$flux[1]" == "0") set flux = `awk '{if ($1 == target && $7 == freq) print $5}' target=$target freq=$freq $datapath/calsdata | head -n 1`

if ("$calgrade" == "") set calgrade = `awk '{if ($1 == target && $7 == freq) print $6}' target=$target freq=$freq $datapath/calsdata | head -n 1`

if ("$addflux" == "") set addflux = `awk '{if ($1 == target && $7 == freq) print $8}' target=$target freq=$freq $datapath/calsdata | head -n 1`

if ("$flux[1]" == "" || "$addflux" == "")then
    echo "FATAL ERROR: Target flux not specified"
    goto enderr
endif

if ("$calgrade" == "") set calgrade = "U"

if (`awk '{if (target == $1 || altname == $2 || target == $2 || altname == $1) print $0}' target=$target altname=$altname $datapath/calsdata | awk '{if (((($7-freq)^2)^.5)/freq < 0.258925) idx += 1} END {if (idx >= 1) print 1; else print 0}' target=$target altname=$altname freq=$freq`) then
    echo "WARNING: Cals database already contains info for this target at a frequency within 1 dB of the frequency that you specified. Would you like to [o]verwrite, (i)gnore, or (c)ancel?"
    set yn = $<
    if ("$yn" == "" || "$yn" == o) then
	awk '{if ((target != $1 && altname != $1 && target != $2 && altname != $2) || ((($7-freq)^2)^.5)/freq >= 0.258925 ) print $0}' target=$target altname=$altname freq=$freq $datapath/calsdata > $datapath/calsdata.new
	mv $datapath/calsdata.new $datapath/calsdata
    else if ("$yn" != "i") then
	goto finish
    endif
endif

echo $target $altname $ra $dec $flux[1] $calgrade $freq $addflux `date +%m%d%y:%H:%M` >> $datapath/calsdata

goto finish

finish:

if !($debug) rm -rf $wd

exit 0

enderr:

if !($debug) rm -rf $wd

exit 1
