#! /bin/tcsh -f

set vis = $1
set line = $2
set ephem = $3
set starttime = `date +%s.%N`

onintr fail

set wd = `mktemp -d "ssaXXXXX"`

foreach file (`echo $vis`)
    echo -n "Preprocessing $file..."
    uvlist vis=$file recnum=0 $line | sed 1,8d | awk '{if ($1$2$3 == "Datavaluesfor") date = $4; if ($1*1 >= 1) print date":"$2}' | sort -u >> $wd/obstimes
    set inttime = `uvcheck vis=$file var=inttime | tail -n 1 | awk '{print $2}'`
    echo "done!"
end

echo -n "Creating frame times..."

foreach obstime (`sort -u $wd/obstimes`)
    julian date=$obstime options=quiet >> $wd/jultimes
end

echo "done!"

sort -un $wd/jultimes | awk '{if ( (last+(inttime/172800)) < $1) {last = $1; print last}}' inttime=$inttime > $wd/jframetimes
wc -l $wd/jframetimes | awk '{print $1" time frames identified..."}'
set frametotal = `wc -l $wd/jframetimes | awk '{print $1}'`
echo "Beginning frame-by-frame processing"
set idx = 0
echo "FrameMid           EphemAz     EphemEl    OffsetXEl"'`'" OffsetEl"'`'"  AzPrime     ElPrime    Chi      RAErr"'"'"/DecErr"'"' > $wd/results

foreach jframetime (`cat $wd/jframetimes`)
    @ idx++
    echo -n "Beginning frame $idx of $frametotal..."
    set jframerange = (`echo $jframetime | awk '{printf "%7.6f %7.6f %7.6f\n",$1-(inttime/172800),$1*1,$1+(inttime/172800)}' inttime=$inttime`)
    set framerange = (`julian jday=$jframerange[1] options=quiet`)
    set framerange = ( $framerange `julian jday=$jframerange[2] options=quiet`)
    set framerange = ( $framerange `julian jday=$jframerange[3] options=quiet`)
    set standardtime = (`echo $framerange[2] | sed 's/\([0-9][0-9]\)\([A-Z][A-Z][A-Z]\)\([0-9][0-9]\):/\3\2\1 /'`)
    set utcstime = `date -d "$standardtime +0000" +%s.%N`
    set ephemtime = `head -n 1 $ephem | awk '{print int(utcstime*(10^int(log($1)/log(10)-9)))}' utcstime=$utcstime`
    set azel = (`ephemspline.rb $ephem $ephemtime`)
    newautomap.csh vis="$vis" select="time($framerange[1],$framerange[2])" options=sefd,nopha,noflag,autoamp,savedata outdir=$wd/maps $line >& /dev/null
    cp -r $wd/maps/*.cm $wd/fitmap >& /dev/null
    if (-e $wd/fitmap) then
	set file = `echo " " $wd/maps/*/visdata " " | sed 's/\visdata / /g' | awk '{print $1}'`
	set chiline = `uvlist vis=$file options=var,full | grep "chi" | tr ':' ' '`
	set chi
	while ("$chi" == "")
	    if ($#chiline <= 2) set chi = 0
	    if ("$chiline[1]" == "chi") set chi = "$chiline[2]"
	    shift chiline
	end
	imfit in=$wd/fitmap object=point >& $wd/fitresults
	prthd in=$wd/fitmap >& $wd/imdata
	set radecoffset = (`egrep 'Right Ascension|Declination' $wd/fitresults | awk '{if ($1 == "Right") print $3; if ($1 == "Declination:")print $2}'`)
	set radec = (`egrep 'RA' $wd/imdata | awk '{print $3}'` `egrep 'DEC' $wd/imdata | awk '{print $3}'`)
	set offerrs = (`grep errors $wd/fitresults | awk '{print $4,$5}'`)
	if ($#radec == 2 && $#radecoffset == 2 && $#offerrs == 2) then
	    set azeloffset = `SSAcoord.rb $radec $radecoffset $chi $azel`
	    echo $framerange[2] `echo $azel[1] | awk '{printf "%3.7f\n",1000+$1}' | sed 's/1//'`" "`echo $azel[2] | awk '{printf "%2.7f\n",$1}'` `echo $azeloffset[1-2] | awk '{if ($1 >= 0) printf "+%1.7f\n",$1; if ($1 < 0) printf "%1.7f\n",$1;if ($2 >= 0) printf "+%1.7f\n",$2; if ($2 < 0) printf "%1.7f\n",$2}'`" "`echo $azeloffset[3] | awk '{printf "%3.7f\n",1000+$1}' | sed 's/1//'`" "`echo $azeloffset[4] | awk '{printf "%2.7f\n",$1}'`" "`echo $chi | awk '{printf "%1.6f",$1}'`" "$offerrs[1]"/"$offerrs[2] >> $wd/results
	    echo "success!"
	else
	    echo "FAIL! (Bad fit)"
	endif
    else
	echo "FAIL! (No frame)"
    endif
    rm -rf $wd/fitmap $wd/maps
end

cp $wd/results ssa.results

set endtime = `date +%s.%N`
echo $endtime $starttime | awk '{print int(($1-$2)/60)" minutes and "int(($1-$2)%60)" seconds."}'

fail:

rm -rf $wd

exit 0
