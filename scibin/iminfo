#! /usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
iminfo <paths...>

Print basic information about images. Like MIRIAD "imhead" but the
output is more concise and it works on MIRIAD, FITS, or CASA images.

When multiple images are specified, the information for each image
will be separated by a blank line, and an extra "path" item will be
printed out indicating which image the information applies to.
"""

import sys, astimage, numpy as np
from astutil import *

def printinfo (path):
    try:
        im = astimage.open (path, 'r')
    except Exception as e:
        print >>sys.stderr, 'error: can\'t open "%s": %s' % (path, e)
        return True

    print 'kind     =', im.__class__.__name__

    latcell = loncell = None

    if im.toworld is not None:
        latax, lonax = im._latlonaxes ()
        delta = 1e-6
        p = 0.5 * (np.asfarray (im.shape) - 1)
        w1 = im.toworld (p)
        p[latax] += delta
        w2 = im.toworld (p)
        latcell = (w2[latax] - w1[latax]) / delta
        p[latax] -= delta
        p[lonax] += delta
        w2 = im.toworld (p)
        loncell = (w2[lonax] - w1[lonax]) / delta * np.cos (w2[latax])

    if im.pclat is not None:
        print 'center   =', fmtradec (im.pclon, im.pclat), '# pointing'
    elif im.toworld is not None:
        w = im.toworld (0.5 * (np.asfarray (im.shape) - 1))
        print 'center   =', fmtradec (w[lonax], w[latax]), '# lattice'

    if im.shape is not None:
        print 'shape    =', ' '.join (str (x) for x in im.shape)
        npix = 1
        for x in im.shape:
            npix *= x
        print 'npix     =', npix

    if im.axdescs is not None:
        print 'axdescs  =', ' '.join (x for x in im.axdescs)

    if latcell is not None:
        print 'ctrcell  = %fʺ × %fʺ # lat, lon' % (latcell * R2A,
                                                   loncell * R2A)

    if im.bmaj is not None:
        print 'beam     = %fʺ × %fʺ @ %f°' % (im.bmaj * R2A,
                                              im.bmin * R2A,
                                              im.bpa * R2D)

        if latcell is not None:
            bmrad2 = 2 * np.pi * im.bmaj * im.bmin / (8 * np.log (2))
            cellrad2 = latcell * loncell
            print 'ctrbmvol = %f px' % np.abs (bmrad2 / cellrad2)

    if im.units is not None:
        print 'units    =', im.units


def cmdline (argv):
    checkusage (__doc__, argv, usageifnoargs=True)

    if len (argv) == 2:
        printinfo (argv[1])
    else:
        for i, path in enumerate (argv[1:]):
            if i > 0:
                print
            print 'path     =', path
            printinfo (path)


## quickutil: usage
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end

if __name__ == '__main__':
    cmdline (sys.argv)
