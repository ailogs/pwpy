#! /usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
blink [-f] [-m] <image1> <image2> [...]

Cycle between two or more images in an interactive graphical
display. Each image must be of precisely the same dimensions, but the
underlying coordinate systems are ignored. The masks of the images are
unified; that is, only pixels that are unmasked in every single image
are shown.

-f -- display the amplitude of the FFT of each image, rather than
  the raw values

-m -- Normalize each image by its maximum value
"""

import sys, numpy as np, astimage

## quickutil: die usage
#- snippet: die.py (2012 Mar 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end

def load (path, fft, maxnorm):
    try:
        img = astimage.open (path, 'r')
    except Exception, e:
        die ('can\'t open path “%s”: %s' % (path, e))

    try:
        img = img.simple ()
    except Exception, e:
        print >>sys.stderr, 'blink: can\'t convert “%s” to simple 2D ' \
            'sky image; taking first plane' % path
        data = img.read (flip=True)[tuple (np.zeros (img.shape.size - 2))]
        toworld = None
    else:
        data = img.read (flip=True)
        toworld = img.toworld

    if fft:
        from numpy.fft import ifftshift, fft2, fftshift
        data = np.abs (ifftshift (fft2 (fftshift (data.filled (0)))))
        data = np.ma.MaskedArray (data)
        toworld = None

    if maxnorm:
        data /= np.ma.max (data)

    return data, toworld


def blink (paths, fft, maxnorm):
    import ndshow

    images = []
    toworlds = []

    for p in paths:
        image, toworld = load (p, fft, maxnorm)
        images.append (image)
        toworlds.append (toworld)

    if not len (images):
        return

    shape = images[0].shape
    for i, im in enumerate (images[1:]):
        if im.shape != shape:
            die ('shape of "%s" does not agree with that '
                 'of "%s"', paths[i+1], paths[0])

    # Merge masks. This is more complicated than you might think
    # since you can't "or" nomask with itself.

    jointmask = np.ma.nomask

    for i in xrange (len (images)):
        if jointmask is np.ma.nomask:
            if images[i].mask is not np.ma.nomask:
                jointmask = images[i].mask
        else:
            np.logical_or (jointmask, images[i].mask, jointmask)

    for im in images:
        im.mask = jointmask

    ndshow.cycle (images, paths,
                  toworlds=toworlds, yflip=True)


def cmdline (argv):
    checkusage (__doc__, argv, usageifnoargs=True)

    fft = '-f' in argv
    if fft:
        argv.remove ('-f')

    maxnorm = '-m' in argv
    if maxnorm:
        argv.remove ('-m')

    if len (argv) < 3:
        wrongusage (__doc__, 'at least two image arguments are required')

    blink (argv[1:], fft, maxnorm)


if __name__ == '__main__':
    import sys
    cmdline (sys.argv)
