#! /usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
pwshow [-f] <image> [images ...]

Display images interactively, in sequence.

-f -- plot the amplitude of the FFT of the images instead
"""

import sys, ndshow, numpy as np, astimage

## quickutil: usage
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end

checkusage (__doc__, sys.argv, usageifnoargs=True)

fft = False
overlaypath = None
images = []

for arg in sys.argv[1:]:
    if arg == '-f':
        fft = True
    elif arg.startswith ('-o'):
        overlaypath = arg[2:]
    else:
        images.append (arg)

if not len (images):
    wrongusage (__doc__, 'must provide at least one path')

anyfailures = False

for path in images:
    try:
        img = astimage.open (path, 'r')
    except Exception, e:
        print >>sys.stderr, 'pwshow: can\'t open path “%s”: %s' % (path, e)
        anyfailures = True
        continue

    try:
        img = img.simple ()
    except Exception, e:
        print >>sys.stderr, 'pwshow: can\'t treat path “%s” as simple 2D ' \
            'image: %s' % (path, e)
        anyfailures = True
        continue

    data = img.read (flip=True)
    toworld = img.toworld

    if overlaypath is None or fft:
        olay = None
    else:
        from srctable import loadAsOverlay
        olay = loadAsOverlay (overlaypath, img.topixel, img.shape[0])

    if fft:
        from numpy.fft import ifftshift, fft2, fftshift
        data = np.abs (ifftshift (fft2 (fftshift (data))))
        toworld = None

    ndshow.view (data, title=path + ' — Array Viewer',
                 toworld=toworld, drawoverlay=olay,
                 yflip=True)

if anyfailures:
    sys.exit (1)
