#! /usr/bin/tcsh -f
# Calibrator Observing and Measurement Processing 
#         for Array Statistics and Status       
#
# This is going to be the cal observation program. Put simply, it will be
# awesome. Oh yes, it WILL be awesome.

set datapath = /home/obs/mmm/karto/cals
set corr = $1

set cal
set freq
set nchan
set sdf
set addflux
set sysflux

set vis = $2
set times = ($3 $4)
set inst = (`echo $5 | tr ':' ' '`)
set marker = (`echo $times[1] | tr '[a-z]' '[A-Z]' | sed 's/\([0-9][0-9]\)\([A-Z][A-Z][A-Z]\)\([0-9][0-9]\):/\3 \2 \1 /'`)
set marker = (`date -d "$marker +0000" +%Y" "%m" "%d" "%H%M%S`)

set histview = /ataarchive/$marker[1]/$marker[2]/$marker[3]/status/compass-$marker[4]/$corr
mkdir -p $histview

set scratch = /ataarchive/scratch/obs/compass/$corr
mkdir -p $scratch

# Take data to a temp directory for processing

uvaver vis=$vis select="time($times[1],$times[2])" options=relax,nocal,nopass,nopol out=$scratch/caldata |& tee -ia $histview/dataread

if ($status) then
    rm -rf $scratch/caldata
    echo "Data read failed!" >> $histview/dataread
    echo COMPASS `date`: "couldn't copy data for analysis; giving up on this scan."
    exit 1
endif

cd $scratch

cp -r caldata $histview

set sourceline = (`uvlist vis=caldata options=var | grep "source" | tr ':' ' '`)

set fr
set cal
#Get the name of the calibrator
while ("$cal" == "")
    if ($sourceline[1] == "source") then
	set cal = `echo $sourceline[2]`
    else if ($#sourceline == 1) then
	set cal == "UNK" # Default to name UNK if cannot be found
    else
	shift sourceline
    endif
end

set freqline = (`uvlist vis=caldata options=var | grep "freq    :" | tr ':' ' '`)
#Get the obs freq of the calibratior (in MHZ)
while ("$freq" == "")
    if ($freqline[1] == "freq") then
	set freq = `echo $freqline[2] | awk '{print $1}'` 
    else if ($#freqline == 1) then
	set freq == "1.42" # Default to 20 cm measurements
    else
	shift freqline
    endif
end

set nchanline = (`uvlist vis=caldata options=var,full | grep "nchan" |  tr ':' ' '`)

while ("$nchan" == "")
    if ($nchanline[1] == "nchan") then
	set nchan = `echo $nchanline[2] | awk '{print $1}'` 
    else if ($#nchanline == 1) then
	set nchan == "1024" # Default to 100 MHz
    else
	shift nchanline
    endif
end

set sdfline = (`uvlist vis=caldata options=var,full | grep "sdf" |  tr ':' ' '`)

while ("$sdf" == "")
    if ($sdfline[1] == "sdf") then
	set sdf = `echo $sdfline[2] | awk '{print $1}'` 
    else if ($#sdfline == 1) then
	set sdf = "1.02400E-04" # Default to 100 MHz
    else
	shift sdfline
    endif
end

set mfreq = `echo $freq | awk '{print int($1*1000)}'`

set calvals = (`calinfo target=$cal freq=$freq options=auto`)
if ("$calvals[1]" == "FATAL") then
    rm -rf caldata
    echo COMPASS `date`: "data not found about the calibrator ($cal $freq)! Giving up on this scan."
    exit 1
endif

set flux = "$calvals[1],$calvals[2],$calvals[3]"
set addflux = "$calvals[8]"
set sysflux = `echo $freq $sdf $nchan | awk '{print (4+($1/5)^2)*sqrt(0.10486/($2*$3))}'`
set check = `echo $sysflux $calvals[1] |awk '{if ($1 > $2) print 1; else print 0}'`
if ($check == 1) then
    echo "NOTICE: estimating lots of phase noise, setting limit loosely"
    set plim = 60
else
    set plim = `calc "asin($sysflux/$calvals[1])*180/pi"`
endif

fxhealth > fxstatus

# Remove RFI from data

newrfisweep.csh vis=caldata options=autoedge scans=999 subint=999 |tee -ia $histview/newrfisweep.log

# Perform calibration on dataset

newcalcal.csh vis=caldata sysflux=$sysflux addflux=$addflux flux=$flux plim=$plim options=polsplit,sefd |tee -ia $histview/newcalcal.log

# Move results to a "display" directory

if !(-e cal-$cal-$mfreq-maps/$cal.cm && -e cal-$cal-$mfreq-maps/sefd) then
    echo COMPASS `date`: "calibration failed! Giving up on this scan."
    rm -rf cal-$cal-$mfreq-maps caldata
    exit 1
endif

stat: 
atasefd -i cal-$cal-$mfreq-maps/sefd,$mfreq
sed 1,2d cal-$cal-$mfreq-maps/sefd | tr '[a-z]' '[A-Z]' | awk '{print $1,$2,$7}' > jypk

set llim = `awk '{print int(10*log($3)/log(10))-2}' jypk | sort -n | head -n 1`
set ulim = `echo $llim | awk '{print $1+20}'`

set idx = 1
rm -f temprar
while ($idx <= `wc -l jypk | awk '{print $1}'`)
    set svals = (`sed -n {$idx}p jypk`)
    set svals = (`awk '{print " "$4,$5" "}' ~/bin/ata.ant | grep " $svals[1] " | awk '{print $1}'`$svals[2] `echo $svals[3] | awk '{print int(10*log($1)/log(10))}'`)
    echo $svals >> temprar
    @ idx++
end

set idx = $llim
rm -f temp.jypk2
while ($idx <= $ulim)
    set count = `grep -c " $idx" temprar`
    set color = 2
    if ($idx < 46) set color = 7
    if ($idx < 39) set color = 3
    echo $idx $count $color >> temp.jypk2
    @ idx++
end
echo lim `echo $llim | awk '{print $1-.5,$1+20.5}'` 0  `less temp.jypk2 | sort -rnk2 | head -n 1 | awk '{print $2+1}'` >  wip.jypkstat
cat $datapath/wip.jypk >> wip.jypkstat
echo "color 0" >> wip.jypkstat

set idx = 1
set badants

while ($idx <= `cat temprar | wc -l`)
    set antvals = (`sed -n {$idx}p temprar | awk '{print $1,$2-.45}'`)
    set antvals = ($antvals[1] $antvals[2] `grep -c "move $antvals[2] " wip.jypkstat | awk '{print $1+.1}'`)
    if (`echo $antvals[2] | awk '{print int($1)}'` < $ulim) then
	echo "move $antvals[2] $antvals[3]" >> wip.jypkstat
	echo "label $antvals[1]" >> wip.jypkstat
    else
	set badants = $badants","$antvals[1]
    endif
@ idx ++
end

set badants2 = (`grep "have no gains solutions." cal-$cal-$mfreq-maps/calrpt | awk '{print $2}' | tr ',' ' '`)

foreach badant2 ($badants2)
    set svals = (`echo $badant2 | sed 's/\([A-Z]\)/ \1/'`)
    set svals = (`awk '{print " "$4,$5" "}' ~/bin/ata.ant | grep " $svals[1] " | awk '{print $1}'`$svals[2])
    set badants = $badants","$svals
end

cat >>wip.jypkstat <<EOF
color 1
move $llim `sort -rnk2 temp.jypk2 | head -n 1 | awk '{print $2+.5}'`
label Bad Antennas: `echo $badants | sed 's/,//'`
mtext t 2 1 .75 `date`
end
EOF

wip wip.jypkstat -d jypkstat-$corr.png/png >& /dev/null

set arc = `echo 4500 | awk '{print int($1*1.430/freq)}' freq=$freq`
echo "arc = $arc"
set imstats = (`imstat in=cal-$cal-$mfreq-maps/$cal.rs | awk '{if (check == 1) print $0; else if ($1 == "Total") check = 1}' | sed 's/\([0-9][0-9]\)-/\1 -/g'`)
set imstats2 = (`imstat in=cal-$cal-$mfreq-maps/$cal.cm region=relcen,arcsec,"box(-$arc,-$arc,$arc,$arc)" | awk '{if (check == 1) print $0; else if ($1 == "Total") check = 1}' | sed 's/\([0-9][0-9]\)-/\1 -/g'`)
set range = `echo $imstats[3] $imstats2[4] | awk '{print $2/$1}'`
set plotscale = `echo $range | awk '{if ($1 > 500) print "log"; else print "lin"}'`
set levs = (`echo $imstats[3] $imstats2[4] | awk '{lim = 4*$1; while (lim < $2) {print lim; lim=2*lim}}'`)
set levs = `echo $levs | tr ' ' ','`
set alevel = `echo $imstats[3] $imstats2[5] | awk '{print (($2/$1)^2)^.5}'`

cgdisp in=cal-$cal-$mfreq-maps/$cal.cm,cal-$cal-$mfreq-maps/$cal.cm region=relcenter,arcsec,box"(-$arc,-$arc,$arc,$arc)" device=cal-$corr.png/png labtyp=arcmin options=beambl,wedge,3value,mirr,full csize=0.6,1 olay=cal-$cal-$mfreq-maps/$cal.olay type=contour,pix levs1=$levs range=0,0,$plotscale,3 >& /dev/null

set retstat = (`sed 1,3d caldata/retmap | awk '{if (NR == 1) {max = $2}; if (NR != 1) {if ($2*1 !=0) cnt+=1; idx+=1; dcnt+=$2; didx+=max}} END {print 100*cnt/idx,100*dcnt/didx}'`)

echo `date +%s` $retstat[1] $retstat[2] $range $imstats[3] $alevel >> obsstats

awk '{if ($1-curdate < 100000) print ($1-curdate)/3600,$2,$3,$4,1/($5+.000000000001),$6}' curdate=`date +%s` obsstats > temp.prsv
cp $datapath/wip.prsv .
echo "mtext t 1.5 0 .25 "`date` >> wip.prsv
echo "end" >> wip.prsv
wip wip.prsv -d prsv-$corr.png/png >& /dev/null
cat $datapath/wip.hs > wip.hardstat
cat $datapath/wip.builds >> wip.hardstat
cat $datapath/wip.ants > temp.ants
ataasciistatus -l | tr ',' ' ' | awk '{if ($1 != "") print $1,$2,($6^2+$7^2)^.5}' > temp.antstatus
set antlist = (`fxconf.rb sals | awk '{if ($1 == inst) print $0}' inst=$inst[2] | tr '[a-z]' '[A-Z]'`)
if ($#antlist > 1) shift antlist

set idx = 1
while ($idx <= `wc -l temp.ants | awk '{print $1}'`)
    set wipline = (`sed -n {$idx}p temp.ants`)
    set statusline = (`grep -i "ant$wipline[4]" temp.antstatus` 0 0 0)
    if (" $antlist " =~ *" $wipline[4] "*) then
	set color = 3
	if (`echo $statusline[3] | awk '{if ($1 > .5) print 1; else print 0}'`) set color = 7
	if ("$statusline[2]" != "Running") set color = 2
    else
	set color = 15
    endif
    echo "color $color" >> wip.hardstat
    echo "$wipline" >> wip.hardstat
    @ idx++
end

cat $datapath/wip.fx > temp.fxstat

set idx = 1
while ($idx <= `wc -l temp.fxstat | awk '{print $1}'`)
    set wipline = (`sed -n {$idx}p temp.fxstat`)
    set twipline = (`echo $wipline | tr '[A-Z]' '[a-z]'`)
    set color = 3
    if ("$wipline[1]" == "plot") then
	if (`grep -c "$twipline[4].$twipline[5] is NOT alive!" fxstatus`) set color = 2
	echo "color $color" >> wip.hardstat
	echo "$wipline" >> wip.hardstat
    else
	echo "$wipline" >> wip.hardstat
    endif
    @ idx++
end
echo "mtext t 2 1 .75 "`date` >> wip.hardstat
echo "end" >> wip.hardstat

wip wip.hardstat -d hardstat-$corr.png/png >& /dev/null

foreach i (*.png)
    convert $i -depth 8 -geometry 350 ${i:r}-thumb.png
end

set timeout = 0

while (-e view/hold && $timeout < 60)
    sleep 1
    timeout++
end

rm -fr view/*
rm -fr data/*
cp wip.hardstat view/wip.hardstat
cp wip.jypkstat view/wip.jypkstat
cp temp.jypk2 view/temp.jypk2
cp wip.prsv view/wip.prsv
cp temp.prsv view/temp.prsv
cp -r cal-$cal-$mfreq-maps/$cal.cm view/cal.cm
cp -r cal-$cal-$mfreq-maps/$cal.cm data/cal.cm
cp cal-$cal-$mfreq-maps/$cal.olay view/cal.olay

cp -r caldata/gains.* data/.
cp caldata/sefd data/sefd
cp caldata/retmap data/retmap
echo "cgdisp in=cal.cm,cal.cm region=relcenter,arcsec,box"'"'"(-$arc,-$arc,$arc,$arc)"'"'" device=1/xs labtyp=arcmin options=beambl,wedge,3value,mirr,full csize=0.6,1 olay=cal.olay type=contour,pix levs1=$levs range=0,0,$plotscale,3" > view/mapcmd
cp -r view/* $histview
cp -r data $histview
cp *.png $histview
scp *.png logbook:/srv/www/vhosts/log/files/plots/.
rm -rf caldata
rm -rf calreduc
rm *.png
mv cal-$cal-$mfreq-maps calreduc
echo COMPASS `date`: "reduction succeeded! Going back to sleep."

exit 0
