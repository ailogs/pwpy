#! /usr/bin/env python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
Usage: uvlwcp [-n] SRC DEST
       uvlwcp [-n] SRC1 ... SRCN DESTDIR
       uvlwcp [-n] -t DESTDIR SRC1 [... SRCN]

Create a lightweight copy of MIRIAD UV data. The visibility data
files are symlinked if 1) the "-n" option is given or 2) the
dataset has no calibration tables; otherwise the data are
copied and calibrations applied with "uvcat".

The same multi-input semantics as "cp" apply to "uvlwcp". The
"-t DESTDIR" option allows the destination directory to be
specified as the first argument, allowing easier interaction with
tools such as "xargs".

Datasets created with "uvlwcp" can be resynced to their source
datasets with "uvlwrevert".
"""

import sys, os, shutil, subprocess

## quickutil: die usage
#- snippet: die.py (2012 Mar 28)
#- SHA1: 2d6b12f46e5b894a92000f35c621235adee4213b

def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 28)
#- SHA1: 496e3e02df4b92f0d5c8887446e0cdb7fd5dcb10

def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end


try:
    from os.path import relpath
except ImportError:
    def relpath (path, start='.'):
        from os.path import abspath, commonprefix, join, sep, pardir
        if not path:
            raise ValueError("no path specified")
        start_list = abspath(start).split(sep)
        path_list = abspath(path).split(sep)
        i = len(commonprefix([start_list, path_list]))
        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]
        if not rel_list:
            return curdir
        return join(*rel_list)

from os.path import isabs, join, exists, isdir, basename, abspath

def jexists (*args):
    return exists (join (*args))


def doone (src, dest, doapply):
    if not isdir (src):
        die ('source \"%s\" is not a directory', src)
    if not jexists (src, 'visdata'):
        die ('source \"%s\" does not appear to be a UV dataset (no \"visdata\" item)', src)
    if exists (dest):
        die ('destination \"%s\" already exists', dest)

    if isabs (src):
        relsrc = src
    elif isabs (dest):
        relsrc = abspath (src)
    else:
        relsrc = relpath (src, dest)

    if doapply and (jexists (src, 'gains') or jexists (src, 'bandpass') or
                    jexists (src, 'leakage')):
        cmd = ['uvcat', 'vis=' + src, 'out=' + dest]
        # There's a calibration table: we have to uvcat.
        try:
            subprocess.check_call (cmd)
        except Exception, e:
            die ('invocation \"%s\" failed: %s', ' '.join (cmd), e)
    else:
        try:
            os.mkdir (dest)
        except Exception, e:
            die ('creation of directory \"%s\" failed: %s', dest, e)

        # We can get away with a lightweight copy
        for item in os.listdir (src):
            if item == 'visdata':
                try:
                    os.symlink (join (relsrc, item), join (dest, item))
                except Exception, e:
                    die ('symlink \"%s\" -> \"%s\" failed: %s', join (relsrc, item),
                         join (dest, item), e)
            else:
                try:
                    shutil.copy (join (src, item), join (dest, item))
                except Exception, e:
                    die ('copy \"%s\" -> \"%s\" failed: %s', join (src, item),
                         join (dest, item), e)

        # History entry
        print >>file (join (dest, 'history'), 'a'), 'UVLWCP:', src, '->', dest

    # Reference back so we can revert
    print >>file (join (dest, 'lwsource'), 'a'), relsrc


def program (args):
    doapply = True

    checkusage (__doc__, ['tmp'] + args, usageifnoargs=True)

    if args[0] == '-n':
        doapply = False
        del args[0]

    if args[0] == '-t':
        dest = args[1]
        if len (args) < 3:
            die ('must provide at least one source dataset')
        ops = [(src, join (dest, basename (src))) for src in args[2:]]
    elif len (args) == 2:
        src, dest = args
        if isdir (dest) and not jexists (dest, 'header'):
            dest = join (dest, basename (src))
        ops = [(src, dest)]
    else:
        dest = args[-1]
        ops = [(src, join (dest, basename (src))) for src in args[:-1]]

    for src, dest in ops:
        doone (src, dest, doapply)


if __name__ == '__main__':
    program (sys.argv[1:])
    sys.exit (0)
