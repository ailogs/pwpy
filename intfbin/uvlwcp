#! /usr/bin/env python
# -*- python -*-

"""Make a copy of a dataset, applying calibration tables if there are
any, but making a quick lightweight copy if there aren't. (Lightweight
copies are always made if the "-n" option is supplied.)

Rationale:

For nice repeatable pipeline operation, one wants to modify successive
copies of MIRIAD UV datasets rather than accumulation operations onto
one single dataset. However, UV data files can be very large but are
often unmodified during pipeline operation. The optimized case of
this program makes copying UV data much faster and less demanding of
disk space.

However, a certain subset of MIRIAD tasks will only operate
successfully on UV datasets without calibration tables:

- calibration tasks, since they typically overwrite calibration
  tables and so might destroy existing information.
- Tasks using the "model" subsystem, which is unaware of 
  calibration tables

If you want to apply one of these tasks on a copy of a dataset, there
are certain cases when a lightweight copy will suffice (i.e., no
calibration tables present), and certain cases when a full copy is
necessary (all other situations). This script allows one to exploit
the speed gains of the first approach when possible without planning
having advance knowledge of which copy method is needed."""

import sys, os, shutil, subprocess

## quickutil: die
#- snippet: die.py
#- date: 2012 Feb 27
#- SHA1: 1bb64c8c018023854995c0f8954a2bdc625a7ee0
def die (fmt, *args):
    """Raise a :exc:`SystemExit` exception with a formatted error message.

:arg str format: a format string
:arg args: arguments to the format string

If *args* is empty, a :exc:`SystemExit` exception is raised with the
argument ``'error: ' + str (fmt)``. Otherwise, the string component is
``fmt % args``. If uncaught, the interpreter exits with an error code
and prints the exception argument.

Example::

   if ndim != 3:
      die ('require exactly 3 dimensions, not %d', ndim)
"""

    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
## end


def usage ():
    print """
Usage: ME [-n] SRC DEST
       ME [-n] SRC1 ... SRCN DESTDIR
       ME [-n] -t DESTDIR SRC1 [... SRCN]

Create a lightweight copy of MIRIAD UV data. The visibility data
files are symlinked if 1) the "-n" option is given or 2) the
dataset has no calibration tables; otherwise the data are
copied and calibrations applied with "uvcat".

The same multi-input semantics as "cp" apply to "uvlwcp". The
"-t DESTDIR" option allows the destination directory to be
specified as the first argument, allowing easier interaction with
tools such as "xargs".

Datasets created with "uvlwcp" can be resynced to their source
datasets with "uvlwrevert".
""".replace ('ME', sys.argv[0])[1:-1] # kill leading/trailing newline
    sys.exit (1)


try:
    from os.path import relpath
except ImportError:
    def relpath (path, start='.'):
        from os.path import abspath, commonprefix, join, sep, pardir
        if not path:
            raise ValueError("no path specified")
        start_list = abspath(start).split(sep)
        path_list = abspath(path).split(sep)
        i = len(commonprefix([start_list, path_list]))
        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]
        if not rel_list:
            return curdir
        return join(*rel_list)

from os.path import isabs, join, exists, isdir, basename, abspath

def jexists (*args):
    return exists (join (*args))


def doone (src, dest, doapply):
    if not isdir (src):
        die ('source \"%s\" is not a directory', src)
    if not jexists (src, 'visdata'):
        die ('source \"%s\" does not appear to be a UV dataset (no \"visdata\" item)', src)
    if exists (dest):
        die ('destination \"%s\" already exists', dest)

    if isabs (src):
        relsrc = src
    elif isabs (dest):
        relsrc = abspath (src)
    else:
        relsrc = relpath (src, dest)

    if doapply and (jexists (src, 'gains') or jexists (src, 'bandpass') or
                    jexists (src, 'leakage')):
        cmd = ['uvcat', 'vis=' + src, 'out=' + dest]
        # There's a calibration table: we have to uvcat.
        try:
            subprocess.check_call (cmd)
        except Exception, e:
            die ('invocation \"%s\" failed: %s', ' '.join (cmd), e)
    else:
        try:
            os.mkdir (dest)
        except Exception, e:
            die ('creation of directory \"%s\" failed: %s', dest, e)

        # We can get away with a lightweight copy
        for item in os.listdir (src):
            if item == 'visdata':
                try:
                    os.symlink (join (relsrc, item), join (dest, item))
                except Exception, e:
                    die ('symlink \"%s\" -> \"%s\" failed: %s', join (relsrc, item), 
                         join (dest, item), e)
            else:
                try:
                    shutil.copy (join (src, item), join (dest, item))
                except Exception, e:
                    die ('copy \"%s\" -> \"%s\" failed: %s', join (src, item), 
                         join (dest, item), e)

        # History entry
        print >>file (join (dest, 'history'), 'a'), 'UVLWCP:', src, '->', dest

    # Reference back so we can revert
    print >>file (join (dest, 'lwsource'), 'a'), relsrc


def program (args):
    doapply = True

    if args[0] == '-n':
        doapply = False
        del args[0]

    if len (args) < 2:
        usage ()

    if args[0] == '-t':
        dest = args[1]
        if len (args) < 3:
            die ('must provide at least one source dataset')
        ops = [(src, join (dest, basename (src))) for src in args[2:]]
    elif len (args) == 2:
        src, dest = args
        if isdir (dest) and not jexists (dest, 'header'):
            dest = join (dest, basename (src))
        ops = [(src, dest)]
    else:
        dest = args[-1]
        ops = [(src, join (dest, basename (src))) for src in args[:-1]]

    for src, dest in ops:
        doone (src, dest, doapply)


if __name__ == '__main__':
    if len (sys.argv) < 2:
        usage ()
    program (sys.argv[1:])
    sys.exit (0)
