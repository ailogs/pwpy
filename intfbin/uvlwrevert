#! /usr/bin/env python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
Usage: uvlwrevert <UVDATA> [... <UVDATA>]

Revert datasets created with "uvlwcp" to match their source datasets.
"""

import sys, os, shutil, subprocess

## quickutil: die usage
#- snippet: die.py (2012 Mar 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end


try:
    from os.path import relpath
except ImportError:
    die ('your Python is too old; no os.path.relpath')

from os.path import isabs, join, exists, isdir, basename, islink

def jexists (*args):
    return exists (join (*args))


def revert (dataset):
    if not isdir (dataset):
        die ('argument \"%s\" is not a directory', dataset)
    if not jexists (dataset, 'visdata'):
        die ('argument \"%s\" does not appear to be a UV dataset (no \"visdata\" item)',
             dataset)
    if not jexists (dataset, 'lwsource'):
        die ('dataset \"%s\" does not appear to have been created with '
             'uvlwcp (no \"lwsource\" item)', dataset)

    # Get location of origin dataset and check validity

    try:
        # Note that relsrc may be an absolute path here, but everything
        # we do works regardless of whether relsrc is absolute or relative.
        relsrc = file (join (dataset, 'lwsource')).read ()[:-1]
        src = join (dataset, relsrc)
    except Exception, e:
        die ('cannot read \"%s\": %s', join (dataset, 'lwsource'), e)

    if not isdir (src):
        die ('origin dataset \"%s\" for argument \"%s\" does not exist',
             src, dataset)
    if not jexists (src, 'visdata'):
        die ('origin \"%s\" for argument \"%s\" does not appear to be a UV dataset'
             ' (no \"visdata\" item)', src, dataset)

    # OK, good to go.

    catit = not islink (join (dataset, 'visdata'))

    try:
        shutil.rmtree (dataset)
    except Exception, e:
        die ('cannot delete dataset \"%s\": %s', dataset, e)

    if catit:
        # It was uvcatted before, so do it again
        cmd = ['uvcat', 'vis=' + src, 'out=' + dataset]
        try:
            subprocess.check_call (cmd)
        except Exception, e:
            die ('invocation \"%s\" failed: %s', ' '.join (cmd), e)
    else:
        # It was lightweight copied before, so do that.
        try:
            os.mkdir (dataset)
        except Exception, e:
            die ('creation of directory \"%s\" failed: %s', dataset, e)

        for item in os.listdir (src):
            if item == 'visdata':
                try:
                    os.symlink (join (relsrc, item), join (dataset, item))
                except Exception, e:
                    die ('symlink \"%s\" -> \"%s\" failed: %s', join (relsrc, item),
                         join (dataset, item), e)
            else:
                try:
                    shutil.copy (join (src, item), join (dataset, item))
                except Exception, e:
                    die ('copy \"%s\" -> \"%s\" failed: %s', join (src, item),
                         join (dataset, item), e)

        # History entry
        print >>file (join (dataset, 'history'), 'a'), 'UVLWCP:', src, '->', dataset

    # Reference back so we can revert
    print >>file (join (dataset, 'lwsource'), 'a'), relsrc


if __name__ == '__main__':
    checkusage (__doc__, usageifnoargs=True)
    for arg in sys.argv[1:]:
        revert (arg)
    sys.exit (0)
