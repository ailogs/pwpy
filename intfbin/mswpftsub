#! /usr/bin/env casa-python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
mswpftsub [-i] [-s|-a] <MS path> <model path>

Model visibilities with a w-projecting Fourier transform and optional
subtraction from the data. The model can either be a model image or a
textual table of sources.

Because this program is a casa-python program, it can't use the
sourcetable format directly; you must run something like:
  st-to-mswpftsub <sources.st |mswpftsub data.ms -

With no options, this program replaces the MODEL_DATA column in the MS.

-i -- add the new visibilities into MODEL_DATA, rather than replacing
-a -- after modeling, add the new MODEL_DATA column into the CORRECTED_DATA column
-s -- after modeling, subtract the new MODEL_DATA column into CORRECTED_DATA

Note that the uv subtraction/addition step is cumulative on top of any
existing data in the CORRECTED_DATA column. So if you run this program
twice successively on a single dataset, you'll subtract off double
your model. The CORRECTED_DATA and MODEL_DATA columns can be reset via
the 'mssetupimaging' command. (Also note that MODEL_DATA is
initialized to unity, so if you use the -i option with a
freshly-initialized MODEL_DATA column you'll probably get undesirable
results.) (There furthermore appears to be a problem in the
subtraction routines in that if CORRECTED_DATA doesn't exist, it will
initialize both CORRECTED_DATA and MODEL_DATA, wiping out the UV
modeling that was just done. In other words, don't use
'msclearimaging' to initialize the dataset, because that will remove
CORRECTED_DATA and trigger this issue.)

The textual table format is line-oriented ASCII:

  kind ra dec flux[jy] [major[arcsec] minor[arcsec] pa[deg]]

where "kind" is either "point" or "gaussian" and "ra" and "dec" are
in colon-separated sexagesimal hours and degrees.
"""

# The "componentlistHome" has an asciitocomponentlist() function but
# the docstring says it only supports AIPS "star" format, which
# doesn't allow for source fluxes and so is useless here. The online
# CASA documentation says more formats are supported, including ones
# with fluxes, but it's just too much of a crapfest for me to want to
# spend time investigating.

import sys, os.path, casac

## quickutil: die usage popoption
#- snippet: die.py (2012 Mar 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
#- snippet: popoption.py (2012 Mar 29)
#- SHA1: 5552980b9034cd6d7ead4d0cd4ca1839face7e84
def popoption (ident, argv=None):
    if argv is None:
        from sys import argv
    if len (ident) == 1:
        ident = '-' + ident
    else:
        ident = '--' + ident
    found = ident in argv
    if found:
        argv.remove (ident)
    return found
## end

def makeComponentList (mdlstream):
    from tempfile import mkdtemp

    if hasattr (casac, 'homefinder'): # CASA < 4.0.0?
        cl = casac.homefinder.find_home_by_name ('componentlistHome').create ()
    else:
        cl = casac.casac.componentlist ()

    for linenum, line in enumerate (mdlstream):
        if line[0] == '#':
            continue
        a = line.strip ().split ()
        if not len (a):
            continue

        # Fun fact: if you don't give CASA the h's and m's instead of
        # colons, it will silently give you super-wrong coordinates.
        # Why am I not surprised?

        rastr = a[1].replace (':', 'h', 1).replace (':', 'm', 1)
        decstr = a[2].replace (':', 'd', 1).replace (':', 'm', 1)
        dstr = 'J2000 %s %s' % (rastr, decstr)
        totflux = float (a[3]) # Jy

        if a[0] == 'point':
            cl.addcomponent (flux=totflux, fluxunit='Jy', polarization='Stokes',
                             dir=dstr, shape='point', freq=['LSRK', '1GHz'],
                             spectrumtype='constant', label='line#%d' % (linenum + 1))
        elif a[0] == 'gaussian':
            major = float (a[4]) # arcsec
            minor = float (a[5]) # arcsec
            pa = float (a[6]) # deg
            cl.addcomponent (flux=totflux, fluxunit='Jy', polarization='Stokes',
                             dir=dstr, shape='Gaussian', freq=['LSRK', '1GHz'],
                             spectrumtype='constant', label='line#%d' % (linenum + 1),
                             majoraxis='%farcsec' % major, minoraxis='%farcsec' % minor,
                             positionangle='%fdeg' % pa)
        else:
            die ('unknown source kind "%s" in line: "%s"', a[0], line.strip ())

    tmpdir = mkdtemp (prefix='mswpftsub.')
    clpath = os.path.join (tmpdir, 'cl')
    cl.rename (clpath)
    cl.close (log=False)

    return clpath, tmpdir


dosub = popoption ('s')
doadd = popoption ('a')
incremental = popoption ('i')
checkusage (__doc__, usageifnoargs=True)

if len (sys.argv) != 3:
    wrongusage (__doc__, 'exactly 2 nonoption arguments are required')

if doadd and dosub:
    wrongusage (__doc__, 'you may only specify one of -a and -s')

mspath = sys.argv[1]
mdlpath = sys.argv[2]

if not os.path.isdir (mspath):
    die ('"%s" is not a directory', mspath)

if mdlpath == '-':
    # Source list from standard input
    # TODO: we don't clean up tmpdir if an exception is raised
    clpath, tmpdir = makeComponentList (sys.stdin)
    args = {'complist': clpath}
elif os.path.isdir (mdlpath):
    # Model image mode
    args = {'model': [mdlpath]}
    tmpdir = None
elif os.path.exists (mdlpath):
    # Source list from file on disk
    clpath, tmpdir = makeComponentList (open (mdlpath))
    args = {'complist': clpath}
else:
    die ('"%s" is not a model image or source list', mdlpath)

args['incremental'] = incremental

if hasattr (casac, 'homefinder'): # CASA < 4.0.0?
    im = casac.homefinder.find_home_by_name ('imagerHome').create ()
else:
    im = casac.casac.imager ()

im.open (mspath, usescratch=True)
im.selectvis (usescratch=True)
im.defineimage ()
im.setoptions (ftmachine='wproject', wprojplanes=128)
im.ft (**args)
im.close ()

if dosub or doadd:
    if hasattr (casac, 'homefinder'): # CASA < 4.0.0?
        ms = casac.homefinder.find_home_by_name ('msHome').create ()
    else:
        ms = casac.casac.ms ()
    ms.open (thems=mspath, nomodify=False)
    ms.uvsub (reverse=doadd)
    ms.close ()

if tmpdir is not None:
    from shutil import rmtree
    try:
        rmtree (tmpdir)
    except Exception:
        print >>sys.stderr, 'warning: couldn\'t clean temporary directory ' + tmpdir
