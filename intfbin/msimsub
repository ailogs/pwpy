#! /usr/bin/env casa-python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
msimsub [-f] <left> <bottom> <right> <top> <imgin> <imgout>
msimsub [-f] <width> <height> <imgin> <imgout>

Extract a subcube of an CASA image. In the first invocation style, the
box to extract is defined by pixel indices in the sky plane. The spans
are inclusive -- for an image of width 1, <left> and <right> should be
the same. Pixel (0,0) is the bottom left corner (and, indeed, pixel
indices are zero-based). In the second invocation style, the extracted
box is centered in the source image.

Negative pixel indices have the size of the relevant axis added to
them, then one subtracted; this gives similar semantics as the
corresponding Python syntax, although the definition is different due
to the inclusiveness of the spans.

The CASA image subsystem claims to support native CASA images, FITS,
and MIRIAD formats. Support for the latter two may have bugs. The
output image will always be CASA format.

Use -f to overwrite the output image if it exists.
"""

import sys, os.path, casautil

## quickutil: die usage
#- snippet: die.py (2012 Mar 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end

checkusage (__doc__, usageifnoargs=True)

overwrite = '-f' in sys.argv
if overwrite:
    sys.argv.remove ('-f')

if len (sys.argv) == 7:
    width = None
    left, bottom, right, top = [int (x) for x in sys.argv[1:5]]
    inpath = sys.argv[5]
    outpath = sys.argv[6]
elif len (sys.argv) == 5:
    width, height = [int (x) for x in sys.argv[1:3]]
    inpath = sys.argv[3]
    outpath = sys.argv[4]
else:
    wrongusage (__doc__, 'expected exactly 4 or 6 arguments')


if not os.path.exists (inpath):
    die ('no such input "%s"', inpath)

if os.path.exists (outpath) and not overwrite:
    die ('output "%s" already exists', outpath)

casautil.logger ()
ia = casautil.tools.image ()
ia.open (inpath)
shape = ia.shape ()
nx, ny = shape[:2]

if width is not None:
    left = (nx - width) // 2
    right = left + width - 1
    bottom = (ny - height) // 2
    top = bottom + height - 1
else:
    if left < 0:
        left += nx - 1
    if right < 0:
        right += nx - 1
    if bottom < 0:
        bottom += ny - 1
    if top < 0:
        top += nx - 1

if left < 0:
    die ('left bound extends beyond image edge (%d < 0)', left)
if bottom < 0:
    die ('bottom bound extends beyond image edge (%d < 0)', bottom)
if left > right:
    die ('desired output width is negative (x from %d to %d)', left, right)
if bottom > top:
    die ('desired output height is negative (y from %d to %d)', bottom, top)
if right > nx:
    die ('right bound extends beyond image edge (%d vs %d)', right, nx)
if top > ny:
    die ('top bound extends beyond image edge (%d vs %d)', top, ny)

tool = ia.collapse ('mean', [len (shape) - 1], outpath, '',
                    '%d,%d,%d,%d' % (left, bottom, right, top),
                    '', '', '', overwrite)
tool.done ()
ia.done ()
