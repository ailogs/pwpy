#! /usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""= cloplot - plot closure quantities
& pkgw
: u-v analysis
+
 Unlike CLOSURE, this won't crash.

< vis
 CLOPLOT supports multiple input datasets.

@ aps

@ interval

--
"""

from __future__ import division
import sys, numpy as np, omega as om
from miriad import *
from mirtask import keys, util, uvdat, cliutil

IDENT = '$Id$'

## quickutil: arraygrower
#- snippet: arraygrower.py
#- date: 2012 Feb 27
#- SHA1: 8ae43ac24e7ea0fb6ee2cc1047cab1588433a7ec
class ArrayGrower (object):
    __slots__ = 'dtype ncols chunkSize _nextIdx _arr'.split ()

    def __init__ (self, ncols, dtype=None, chunkSize=128):
        if dtype is None:
            import numpy as np
            dtype = np.float

        self.dtype = dtype
        self.ncols = ncols
        self.chunkSize = chunkSize
        self.clear ()


    def clear (self):
        self._nextIdx = 0
        self._arr = None
        return self


    def __len__ (self):
        return self._nextIdx


    def addLine (self, line):
        from numpy import asarray, ndarray

        line = asarray (line, dtype=self.dtype)
        if line.size != self.ncols:
            raise ValueError ('line is wrong size')

        if self._arr is None:
            self._arr = ndarray ((self.chunkSize, self.ncols),
                                 dtype=self.dtype)
        elif self._arr.shape[0] <= self._nextIdx:
            self._arr.resize ((self._arr.shape[0] + self.chunkSize,
                               self.ncols))

        self._arr[self._nextIdx] = line
        self._nextIdx += 1
        return self


    def add (self, *args):
        self.addLine (args)
        return self


    def finish (self):
        if self._arr is None:
            from numpy import ndarray
            ret = ndarray ((0, self.ncols), dtype=self.dtype)
        else:
            self._arr.resize ((self._nextIdx, self.ncols))
            ret = self._arr

        self.clear ()
        return ret
## end

banner = util.printBannerGit ('cloplot',
                              'plot closure quantities', IDENT)

ks = keys.KeySpec ()
ks.mkeyword ('aps', 'a', 3)
ks.keyword ('interval', 'd', 1./60)
ks.uvdat ('dlsr3')
args = ks.process ()

if len (args.aps) != 3:
    util.die ('must specify exactly three antpols to plot (aps=...)')

try:
    theaps = [util.parseAP (ap) for ap in args.aps]
except StandardError:
    util.die ('cannot parse antpol names %s', ','.join (args.aps))

qtydesc = '-'.join (util.fmtAP (ap) for ap in theaps)

if args.interval <= 0:
    util.die ('illegal averaging interval of %f', args.interval)

interval = args.interval / 24 / 60

magsq = lambda cmplx: cmplx.real**2 + cmplx.imag**2
normph = lambda ph: ((ph + np.pi) % (2 * np.pi)) - np.pi

class ClosureComputer (object):
    """This closure computer computes the closure for each dump,
    and averages those complex values over the integration interval."""

    def __init__ (self, interval, aps):
        self.interval = interval
        self.aps = aps

        self.totclowt = self.totwt = 0

        if util.apAnt (aps[1]) < util.apAnt (aps[0]) or \
                util.apAnt (aps[2]) < util.apAnt (aps[1]):
            util.die ('for now, triple must be nondecreasing ant number order')


    def _dump_done (self, nseen, closure, fracerrsq):
        if nseen == 3:
            weight = 1. / (magsq (closure) * fracerrsq) # = variance ** -2
            self.totclowt += closure * weight
            self.totwt += weight

        self.startnewdump = True


    def _integ_done (self, xval):
        if self.totwt > 0:
            closure = self.totclowt / self.totwt
            err = self.totwt**-0.5
            phase = np.arctan2 (closure.imag, closure.real)
            self.ag.add (xval, phase, err / np.abs (closure))

        self.totclowt = 0.
        self.totwt = 0.


    def uvdat (self):
        interval = self.interval
        ap1, ap2, ap3 = self.aps
        bpmatch = frozenset (((ap1, ap2), (ap2, ap3), (ap1, ap3)))

        self.ag = ArrayGrower (3)
        sets = []

        hprev = None
        tprev = tmin = tmax = None
        obsra = None
        self.startnewdump = True

        for ihandle, preamble, data, flags in uvdat.read ():
            t = preamble[3]

            if tprev is not None and abs (t - tprev) > 1./86400:
                self._dump_done (nseen, closure, fracerrsq)

            if tmin is not None and (t - tmin > self.interval or
                                     tmax - t > self.interval):
                obsra = ihandle.getVarDouble ('obsra')
                ha = normph (0.5 * (lstmin + lstmax) - obsra)
                self._integ_done (ha)
                tmin = None

            if hprev is None:
                hprev = ihandle
                curname = ihandle.path ()
            elif ihandle is not hprev:
                data = self.ag.finish ().T
                if data.size == 0:
                    print >>sys.stderr, 'Warning: no data collected for', curname
                else:
                    sets.append ((curname, data))
                hprev = ihandle
                curname = ihandle.path ()

            if self.startnewdump:
                nseen = fracerrsq = 0
                closure = 1.
                self.startnewdump = False

            if tmin is None:
                tmin = tmax = t
                lstmin = lstmax = ihandle.getVarDouble ('lst')
            else:
                tmin = min (tmin, t)
                tmax = max (tmax, t)
                lst = ihandle.getVarDouble ('lst')
                if lst < lstmin - np.pi:
                    lst += 2 * np.pi # unwrap lst values so min/max/mean work right
                lstmin = min (lstmin, lst)
                lstmax = max (lstmax, lst)

            tprev = t

            bp = util.mir2bp (ihandle, preamble)
            if bp not in bpmatch:
                continue

            w = np.where (flags)[0]
            if w.size == 0:
                continue

            corr = data[w].mean ()
            var = ihandle.getVariance () / w.size

            if bp == (ap1, ap3):
                corr = corr.conj ()

            closure *= corr
            fracerrsq += var / magsq (corr)
            nseen += 1

        if tprev is not None:
            self._dump_done (nseen, closure, fracerrsq)
            ha = normph (0.5 * (lstmin + lstmax) - obsra)
            self._integ_done (ha)

            data = self.ag.finish ().T
            if data.size == 0:
                print >>sys.stderr, 'Warning: no data collected for', curname
            else:
                sets.append ((curname, data))

        return sets


cc = ClosureComputer (interval, theaps)
sets = cc.uvdat ()

if len (sets) == 0:
    util.die ('no data accumulated')

p = om.RectPlot ()

for fn, data in sets:
    # high-uncert points can make the plots pretty useless, so filter.
    # RMS phase of pure noise is about 100 degrees ~= 7/4 radians
    w = np.where (data[2] < 1.75)[0]
    if w.size < 1:
        print >>sys.stderr, 'Warning: no valid data collected for', fn
        continue

    hangle, phases, uncerts = data[:,w]
    hours = hangle * 12 / np.pi
    phases *= 180 / np.pi
    uncerts *= 180 / np.pi

    print fn, '- RMS closure phase: %.2f° (only useful for pt src)' % \
        np.sqrt ((phases**2).mean ())
    print fn, '- median uncert: %.2f°' % np.median (uncerts)
    p.addXYErr (hours, phases, uncerts, fn + ' - ' + qtydesc,
                lines=False, nudgex=False)

p.show ()
