#! /usr/bin/env casa-python
# -*- python -*-

import sys


def die (fmt, *args):
    print >>sys.stderr, 'msimsquash: error:', fmt % args
    sys.exit (1)


def _mungecoords (ia):
    # I totally made this all up, based on looking at the structure of
    # the coordsys "record" thingie.

    # First, determine which axes should be kept, and determine the
    # new pixel and logical axis numbers to which their info should
    # refer. Rewrite the pixelmap/worldmap data while we're here.

    shape = ia.shape ()
    cr = ia.coordsys ().torecord ()
    nlog = 0
    keepi = 0
    keepaxis = 0
    idxmap = {}

    while True:
        axes = cr.get ('pixelmap%d' % nlog)
        if axes is None:
            break

        anysquash = False
        allsquash = True

        for axis in axes:
            if shape[axis] == 1:
                anysquash = True
            else:
                allsquash = False

        if anysquash:
            if not allsquash:
                # I'm sure this message will be helpful.
                die ('can\'t handle semi-squashed multi-dimensional '
                     'logical axis #%d', nlog)
        else:
            idxmap[nlog] = keepi
            keepi += 1
            waxes = cr['worldmap%d' % nlog]

            for i in xrange (axes.size):
                axes[i] = keepaxis
                waxes[i] = keepaxis
                keepaxis += 1

        nlog += 1

    # Now copy the info, renumbering the logical axis records and
    # implicitly omitting the squashed axes. Go backwards in case we
    # have more than 10 axes.

    nr = {}

    for key, val in cr.iteritems ():
        for i in xrange (nlog - 1, -1, -1):
            s = str (i)

            if key.endswith (s):
                if i in idxmap:
                    # We need to keep and renumber this item
                    nr[key[:-len (s)] + str (idxmap[i])] = val
                break
        else:
            # Didn't end with a number, must be different piece
            # of useful info
            nr[key] = val

    return nr


def squash (inpath, outpath, overwrite):
    import casac

    ia = casac.homefinder.find_home_by_name ('imageHome').create ()
    tb = casac.homefinder.find_home_by_name ('tableHome').create ()

    ia.open (inpath)
    data = ia.getchunk (dropdeg=True)
    coords = _mungecoords (ia)
    ia.newimagefromarray (outpath, data, coords, overwrite, log=False)

    try:
        # Copy table keywords
        ia.done ()
        tb.open (inpath)
        kwinfo = {}
        for kw in tb.keywordnames ():
            if kw == 'coords' or kw == 'logtable':
                continue

            kwinfo[kw] = tb.getkeyword (kw)
        tb.close ()

        tb.open (outpath, nomodify=False)
        for kw, val in kwinfo.iteritems ():
            tb.putkeyword (kw, val)
        tb.close ()
    except:
        a, b, c = sys.exc_info ()
        from shutil import rmtree
        rmtree (outpath)
        raise a, b, c


def cmdline (args):
    from os.path import isdir, exists

    overwrite = '-f' in args
    if overwrite:
        args.remove ('-f')

    if len (args) != 2:
        print >>sys.stderr, """Usage: msimsquash [-f] <imgin> <imgout>

"Squash" an image by removing degenerate axes. These are generally
Stokes and frequency axes.

Use -f to overwrite the output image if it exists.
"""
        sys.exit (1)

    inpath = args[0]
    outpath = args[1]

    if not isdir (inpath):
        die ('no such (or non-directory) input "%s"', inpath)

    if exists (outpath) and not overwrite:
        die ('output "%s" already exists', outpath)

    squash (inpath, outpath, overwrite)


if __name__ == '__main__':
    cmdline (sys.argv[1:])
