#! /usr/bin/env casa-python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
msphotom vis=<MS> [keywords...]

Extract photometry from the visibilities in a measurement set. See
below the keyword docs for some important caveats.

vis=
  Path of the MeasurementSet dataset to read. Required.

out=
  Path to which data will be written. If unspecified, data are written
  to standard output.

rephase=RA,DEC
  Phase the data to extract fluxes in the specified direction. If
  unspecified, the data are not rephased, i.e. the flux at the
  phase center is extracted. RA and DEC should be in sexigesimal
  with fields separated by colons.

array=, baseline=, field=, observation=, polarization=, scan=,
scanintent=, spw=, taql=, time=, uvdist=
  MeasurementSet selectors used to filter the input data.
  Default polarization is 'RR,LL'. All polarizations are averaged
  together, so mixing parallel- and cross-hand pols will is almost
  never what you want to do.

datacol=
  Name of the column to use for visibility data. Defaults to 'data'.
  You might want it to be 'corrected_data'.

datascale=
  Multiply fluxes by this number before reporting them. Defaults
  to 1e6, so that the output is in terms of microjanskys if the
  data are correctly flux-scaled. The textual output has two
  decimal places so adjusting this value can give better results
  if your characteristic fluxes are significant different than this.

believesigmas=[t|f]
  Defaults to false, which means that we assume that the 'sigma'
  column in the dataset isn't scaled correctly. Instead uncertainties
  are assessed from the scatter of all the visibilities in each
  timeslot. If true, sigmas are used and propagated in the standard
  way.

IMPORTANT: the fundamental assumption of this task is that the only
signal in the visibilities is from a point source at the phasing
center. We also assume that all sampled polarizations get equal
contributions from the source (though you can resample the Stokes
parameters on the fly, so this is not quite the same thing as
requiring the source be unpolarized).

Prints out

  MJD dt[min] re reErr im imErr mag magErr npts

with sorted MJDs, one record for each timestamp present in the dataset,
with all fluxes in ujy. dt is simply (MJD - MJD[0])/86400.

You will probably want to apply a moving smoothing window to the
output of this program. The function smooth() in the source shows how
to do this. Recommended to plot re(t) and im(t) in the same plot
window since im(t) should give a sense of the random variation in the
data.
"""

import sys, os.path, casac, numpy as np
from kwargv import ParseKeywords, Custom
from astutil import *

## quickutil: usage die
#- snippet: usage.py (2012 Oct 01)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
#- snippet: die.py (2012 Oct 01)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
## end

class Config (ParseKeywords):
    vis = Custom (str, required=True)
    datacol = 'data'
    believesigmas = False

    @Custom (str, uiname='out')
    def outstream (val):
        if val is None:
            return sys.stdout
        try:
            return open (val, 'w')
        except Exception as e:
            die ('cannot open path "%s" for writing', val)

    datascale = 1e6

    @Custom ([str, str], default=None)
    def rephase (val):
        if val is None:
            return None

        try:
            ra = parsehours (val[0])
            dec = parsedeglat (val[1])
        except Exception as e:
            die ('cannot parse "rephase" values as RA/dec: %s', e)
        return ra, dec

    # MeasurementSet filters
    array = str
    baseline = str
    field = str
    observation = str
    polarization = 'RR,LL'
    scan = str
    scanintent = str
    spw = str
    taql = str
    time = str
    uvdist = str

RR = 5
LL = 8
INVERSE_C_MS = 3.3356409519815204e-09 # inverse (speed of light in m/s)

mssels = frozenset ('array baseline field observation scan '
                    'scanintent spw taql time uvdist'.split ())

def process (cfg):
    if hasattr (casac, 'homefinder'): # CASA < 4.0.0?
        tb = casac.homefinder.find_home_by_name ('tableHome').create ()
        ms = casac.homefinder.find_home_by_name ('msHome').create ()
    else:
        tb = casac.casac.table ()
        ms = casac.casac.ms ()

    # Read stuff in. Even if the sigma values don't have their
    # absolute scale set correctly, we can still use them to set the
    # relative weighting of the data points.
    #
    # datacol is (ncorr, nchan, nchunk)
    # flag is (ncorr, nchan, nchunk)
    # weight is (ncorr, nchunk)
    # uvw is (3, nchunk)
    # time is (nchunk)
    # axis_info.corr_axis is (ncorr)
    # axis_info.freq_axis.chan_freq is (nchan, 1) [for now?]

    tb.open (os.path.join (cfg.vis, 'DATA_DESCRIPTION'))
    ndd = tb.nrows ()
    tb.close ()

    ms.open (cfg.vis)
    totrows = ms.nrow ()
    sels = dict ((n, cfg.get (n)) for n in mssels
                 if cfg.get (n) is not None)
    ms.msselect (sels)

    colnames = [cfg.datacol] + 'flag weight time axis_info'.split ()

    fields = ms.range ('field_id')['field_id']
    if fields.size != 1:
        # I feel comfortable making this a fatal error, even if we're
        # not rephasing.
        die ('selected data should contain precisely one field; got %d', fields.size)
    fieldid = fields[0]
    rephase = (cfg.rephase is not None)

    if rephase:
        tb.open (os.path.join (cfg.vis, 'FIELD'))
        phdirinfo = tb.getcell ('PHASE_DIR', fieldid)
        tb.close ()

        if phdirinfo.shape[1] != 1:
            die ('trying to rephase but target field (#%d) has a '
                 'time-variable phase center, which I can\'t handle', fieldid)
        ra0, dec0 = phdirinfo[:,0] # in radians.

        # based on intflib/pwflux.py, which was copied from
        # hex/hex-lib-calcgainerr:

        dra = cfg.rephase[0] - ra0
        dec = cfg.rephase[1]
        l = np.sin (dra) * np.cos (dec)
        m = np.sin (dec) * np.cos (dec0) - np.cos (dra) * np.cos (dec) * np.sin (dec0)
        n = np.sin (dec) * np.sin (dec0) + np.cos (dra) * np.cos (dec) * np.cos (dec0)
        n -= 1 # makes the work below easier
        lmn = np.asarray ([l, m, n])
        colnames.append ('uvw')

    tbins = {}

    for ddid in xrange (ndd):
        ms.selectinit (ddid)
        if not ms.nrow (True):
            # no data for this DDID; a warning will have been printed.
            # Don't see a way to prevent this short of messing with
            # casalog.
            continue

        if cfg.polarization is not None:
            ms.selectpolarization (cfg.polarization.split (','))

        ms.iterinit ()
        ms.iterorigin ()

        while True:
            cols = ms.getdata (items=colnames)

            if rephase:
                freqs = cols['axis_info']['freq_axis']['chan_freq']
                # In our usage, freqs should be of shape (nchan, 1). If you
                # don't selectinit() with a specific DD, you seem to get
                # (nchan, nspw). Neither seems to really agree with the docs.
                # Trying to be careful in case CASA changes.
                assert freqs.shape[1] == 1, 'internal inconsistency, chan_freq??'
                # convert to m^-1 so we can multiply against UVW directly:
                freqs = freqs[:,0] * INVERSE_C_MS

            for i in xrange (cols['time'].size): # all records
                time = cols['time'][i]
                tdata = tbins.get (time, None)
                if tdata is None:
                    tdata = tbins[time] = [0., 0., 0., 0., 0]

                if rephase:
                    uvw = cols['uvw'][:,i]
                    ph = np.exp ((0-2j) * np.pi * np.dot (lmn, uvw) * freqs)

                for j in xrange (cols['flag'].shape[0]): # all polns
                    # We just average together all polarizations right now!
                    # (Not actively, but passively by just iterating over them.)
                    data = cols[cfg.datacol][j,:,i]
                    flags = cols['flag'][j,:,i]

                    # XXXXX casacore is currently broken and returns
                    # the raw weights from the dataset rather than
                    # applying the polarization selection. Fortunately
                    # all of our weights are the same, and you can
                    # never fetch more pol types than the dataset has,
                    # so this bit works despite the bug.

                    w = np.where (~flags)[0]
                    if not w.size:
                        continue # all flagged

                    if rephase:
                        data *= ph

                    d = data[w].mean ()
                    # account for flagged parts. 90% sure this is the
                    # right thing to do:
                    wt = cols['weight'][j,i] * w.size / data.size
                    wd = wt * d
                    # note a little bit of a hack here to encode real^2 and
                    # imag^2 separately:
                    wd2 = wt * (d.real**2 + (1j) * d.imag**2)

                    tdata[0] += wd
                    tdata[1] += wd2
                    tdata[2] += wt
                    tdata[3] += wt**2
                    tdata[4] += 1

            if not ms.iternext ():
                break

    ms.close ()

    # Could gain some efficiency by using a better data structure than a dict().
    st = sorted (tbins.iterkeys ())

    for t in st:
        wd, wd2, wt, wt2, n = tbins[t]

        mjd = t / 86400.
        dtmin = (t - st[0]) / 60.
        r_sc = wd.real / wt * cfg.datascale
        i_sc = wd.imag / wt * cfg.datascale
        r2_sc = wd2.real / wt * cfg.datascale**2
        i2_sc = wd2.imag / wt * cfg.datascale**2

        if cfg.believesigmas:
            ru_sc = wt**-0.5 * cfg.datascale
            iu_sc = wt**-0.5 * cfg.datascale
        else:
            rv_sc = r2_sc - r_sc**2 # variance among real/imag msmts
            iv_sc = i2_sc - i_sc**2
            ru_sc = np.sqrt (rv_sc * wt2) / wt # uncert in mean real/img values
            iu_sc = np.sqrt (iv_sc * wt2) / wt

        mag = np.sqrt (r_sc**2 + i_sc**2)
        umag = np.sqrt (r_sc**2 * ru_sc**2 + i_sc**2 * iu_sc**2) / mag

        print >>cfg.outstream, \
            '%12.5f %6.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %d' % \
            (mjd, dtmin, r_sc, ru_sc, i_sc, iu_sc, mag, umag, n)


def smooth (x, re, reerr, im, imerr, window):
    """Sample function for reference. Not used in this task."""
    conv = lambda q, r: np.convolve (q, r, mode='valid')

    cx = conv (x, window)

    rewt = reerr**-2
    cre = conv (rewt * re, window) / conv (rewt, window)
    creerr = np.sqrt (conv (rewt, window**2)) / conv (rewt, window)

    imwt = imerr**-2
    cim = conv (imwt * im, window) / conv (imwt, window)
    cimerr = np.sqrt (conv (imwt, window**2)) / conv (imwt, window)

    return cx, cre, creerr, cim, cimerr


def cmdline (argv):
    checkusage (__doc__, usageifnoargs=True)
    cfg = Config ().parse (argv[1:])
    process (cfg)


if __name__ == '__main__':
    cmdline (sys.argv)
