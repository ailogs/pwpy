#! /usr/bin/env python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
msimgen [-c] [-tNN] [-mNN] <template image> <srctable file|-> <output image>

Given a template CASA-format image, create a new image filled with
sources specified in the sourcetable. By default, the output image is
a model image, in units of Jy/pixel with no convolution. If you want
to create model UV data, you can skip the model image step by using
the new component-list support in "mswpftsub".

-c -- convolve the model source parameters with the restoring beam
parameters in the template image, and create an output image in
units of Jy/beam.

-tNN -- initialize the output image to be the template scaled by the
number NN. Default is 0, i.e., ignore the data in the template image.
Use -t1 to effectively add or subtract the models from the template.

-mNN -- scale the model values by the number NN when creating the
output image. Default is 1, i.e., add in the models exactly as
specified. Use -m-1 to subtract the models from the input.

A source file of "-" indicates that the information should be read
from standard input. See "mssfextract" or "msmkrandsrc" for ways to
generate such source lists.
"""

# Programmer notes:
"""
We assume that RA is the last image axis and Dec is the
second-to-last. There's probably a way to do this better (though not
necessarily a very clean way).

TODO: use astimage. Need a generic way to set the units.
"""

import sys, numpy as np, srctable
from astutil import *

GAUSSMINFLUX = 1e-6 # see fill_gauss

## quickutil: die usage
#- snippet: die.py (2012 Mar 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end

def rad2perpix (pix2world, pixelcoords):
    """Given pixel coordinates and a transform function, return the
    angular area of a pixel at those coordinates in radians**2. This
    can vary depending on the map projection."""

    DELTA = 1e-4

    pixelcoords = list (pixelcoords)
    w1 = pix2world (pixelcoords)
    pixelcoords[-1] += DELTA
    pixelcoords[-2] += DELTA
    w2 = pix2world (pixelcoords)

    dra = w2[-1] - w1[-1]
    ddec = w2[-2] - w1[-2]
    return (dra**2 + ddec**2) / (2 * DELTA**2)


def fill_point (image, worldcoords, pixelcoords, data, totflux):
    # Because we're unresolved, our total flux T in Jy
    # will be spread out over 1 pixel, so our flux in
    # Jy/px is also T.

    # Note: we don't do any bounds-checking.

    c = np.floor (pixelcoords).astype (np.int)
    d1 = pixelcoords[-1] - c[-1]
    d2 = pixelcoords[-2] - c[-2]

    data[tuple (c)] += totflux * (1 - d1) * (1 - d2)
    c[-1] += 1
    data[tuple (c)] += totflux * d1 * (1 - d2)
    c[-2] += 1
    data[tuple (c)] += totflux * d1 * d2
    c[-1] -= 1
    data[tuple (c)] += totflux * (1 - d1) * d2


def fill_gauss (image, worldcoords, pixelcoords, data, src, beaminfo=None):
    # From our total flux in units of Jy and dimensions in arcsec, we
    # need to compute our peak flux in units of Jy/px or Jy/bm. The
    # latter is pretty trivial. The former is also fairly
    # straightforward because the image coordinate system lets us
    # convert between pixels and angular units easily,

    # We sidestep some tricky issues about rotation of ra/dec vs
    # the pixel axis by computing equatorial coordinates for every
    # pixel that we think is near the source.

    from numpy import (array, ceil, cos, empty, exp, floor, log,
                       maximum, ones, pi, sin, sqrt, zeros)

    smajor = src.major * F2S
    sminor = src.minor * F2S

    if beaminfo is None:
        # Work in units of Jy/pixel
        srcvol = 2 * pi * smajor * sminor
        volperpix = rad2perpix (image.toworld, pixelcoords)
        pkflux = src.totflux * volperpix / srcvol
    else:
        # Work in Jy/bm
        bmaj, bmin, bpa = beaminfo
        pkflux = src.totflux * bmaj * bmin / (src.major * src.minor)

    # Compute effective sigmas in RA and Dec directions, then
    # figure out about how far out we need to image in pixel space
    # to do a faithful job of representing the source. This is
    # parametrized by GAUSSMINFLUX, the approximate minimum Jy/px
    # flux value that we will compute.

    sra = ((sin (src.pa) / smajor)**2 + (cos (src.pa) / sminor)**2)**-0.5
    sdec = ((cos (src.pa) / smajor)**2 + (sin (src.pa) / sminor)**2)**-0.5
    numsigmatotravel = sqrt (2 * log (abs (pkflux) / GAUSSMINFLUX))

    dra = sra * numsigmatotravel
    ddec = sdec * numsigmatotravel
    deltapix = zeros (4) # minus x, minus y, plus x, plus y

    for c1, c2 in zip ((-1, -1, 1, 1), (-1, 1, -1, 1)):
        worldwork = array (worldcoords)
        worldwork[-1] += c1 * dra / worldcoords[-2]
        worldwork[-2] += c2 * ddec
        delta = pixelcoords - array (image.topixel (worldwork))
        deltapix[0] = min (deltapix[0], delta[-1])
        deltapix[1] = min (deltapix[1], delta[-2])
        deltapix[2] = max (deltapix[2], delta[-1])
        deltapix[3] = max (deltapix[3], delta[-2])

    # Pad out to at least 3 pixels each way
    coeff = array ([-1, -1, 1, 1])
    deltapix = coeff * maximum (coeff * deltapix, ones (4) * 3)

    # Transform to absolute pixels and clip to bounds. abspix[2,3] are
    # offset by one because they only come up in Python range-type
    # situations.

    abspix = empty (4, dtype=np.int)
    abspix[0] = max (floor (deltapix[0] + pixelcoords[-1]), 0)
    abspix[1] = max (floor (deltapix[1] + pixelcoords[-2]), 0)
    abspix[2] = min (ceil (deltapix[2] + pixelcoords[-1]) + 1,
                     image.shape ()[-1])
    abspix[3] = min (ceil (deltapix[3] + pixelcoords[-2]) + 1,
                     image.shape ()[-2])

    # Compute the Gaussian values, precreating arrays of ra/dec values
    # of pixels so we can do most of the math vectorially.

    nx = abspix[2] - abspix[0]
    ny = abspix[3] - abspix[1]
    ras = empty ((ny, nx))
    decs = empty ((ny, nx))

    for ypix in xrange (abspix[1], abspix[3]):
        dy = ypix - abspix[1]
        pixelcoords[-2] = ypix

        for xpix in xrange (abspix[0], abspix[2]):
            dx = xpix - abspix[0]
            pixelcoords[-1] = xpix
            w = image.toworld (pixelcoords)
            ras[dy,dx] = w[-1]
            decs[dy,dx] = w[-2]

    ras -= worldcoords[-1] # -> delta RA
    ras *= cos (decs) # sky coords to offset
    decs -= worldcoords[-2] # -> delta dec
    b = sin (-2 * src.pa) * (sminor**-2 - smajor**-2)
    q = -0.5 * ((ras / sra)**2 + b * ras * decs + (decs / sdec)**2)
    px = pkflux * exp (q)

    # Finally done.
    data[...,abspix[1]:abspix[3],abspix[0]:abspix[2]] += px


def fill_image (srcstream, outpath, convolve=False, tmplscale=0,
                modelscale=1):
    import pyrap.images as PI

    oi = PI.image (outpath)
    # Fill in world coord values of axes we don't care about.
    worldcoords = oi.toworld (np.zeros (len (oi.shape ())))
    odata = oi.getdata ()
    odata *= tmplscale

    beaminfo = None

    if convolve:
        # Need restoring beam info to know what to convolve with
        ii = oi.imageinfo ()
        if 'restoringbeam' not in ii:
            die ('requested to convolve model with restoring beam, '
                 'but beam info not present in template')

        beaminfo = [0, 0, 0]
        beaminfo[0] = ii['restoringbeam']['major']['value'] * A2R
        beaminfo[1] = ii['restoringbeam']['minor']['value'] * A2R
        beaminfo[2] = ii['restoringbeam']['positionangle']['value'] * D2R

        if ii['restoringbeam']['major']['unit'] != 'arcsec':
            die ('expect restoring beam major axis to be given in arcsec')
        if ii['restoringbeam']['minor']['unit'] != 'arcsec':
            die ('expect restoring beam minor axis to be given in arcsec')
        if ii['restoringbeam']['positionangle']['unit'] != 'deg':
            die ('expect restoring beam position angle to be given in degrees')

    for src in srctable.readStream (srcstream)[2]:
        worldcoords[-1] = src.ra
        worldcoords[-2] = src.dec
        pixelcoords = np.asarray (oi.topixel (worldcoords))

        src.totflux *= modelscale

        if not hasattr (src, 'major'):
            src.major = src.minor = src.pa = None

        if convolve:
            if src.major is None:
                src.major, src.minor, src.pa = beaminfo
            else:
                src.major, src.minor, src.pa = gaussianConvolve (src.major,
                                                                 src.minor,
                                                                 src.pa,
                                                                 *beaminfo)

        if src.major is None:
            fill_point (oi, worldcoords, pixelcoords, odata, src.totflux)
        else:
            fill_gauss (oi, worldcoords, pixelcoords, odata, src,
                        beaminfo=beaminfo)

    oi.putdata (odata)
    del oi # ??? how to close?


def imgen (inpath, srcstream, outpath, convolve=False, tmplscale=0,
           modelscale=1):
    import pyrap.tables as PT, pyrap.images as PI

    PT.tablecopy (inpath, outpath, deep=True)
    ot = PT.table (outpath, readonly=False, ack=False)
    if convolve:
        ot.putkeyword ('units', 'Jy/beam')
    else:
        ot.putkeyword ('units', 'Jy/pixel')
    ot.close ()

    try:
        fill_image (srcstream, outpath, convolve=convolve,
                    tmplscale=tmplscale, modelscale=modelscale)
    except:
        t, v, tb = sys.exc_info ()
        PT.tabledelete (outpath, ack=False)
        raise t, v, tb


def cmdline (argv):
    from os.path import exists
    checkusage (__doc__, argv, usageifnoargs=True)

    convolve = False
    tmplscale = 0
    modelscale = 1
    miscargs = []

    for arg in argv[1:]:
        if arg == '-c':
            convolve = True
        elif arg.startswith ('-t'):
            tmplscale = float (arg[2:])
        elif arg.startswith ('-m'):
            modelscale = float (arg[2:])
        else:
            miscargs.append (arg)

    if len (miscargs) != 3:
        wrongusage (__doc__, 'exactly 3 nonoption arguments expected')

    inpath, srcpath, outpath = miscargs

    if exists (outpath):
        die ('output "%s" already exists', outpath)

    if srcpath == '-':
        srcstream = sys.stdin
    else:
        srcstream = open (srcpath)

    imgen (inpath, srcstream, outpath, convolve=convolve,
           tmplscale=tmplscale, modelscale=modelscale)


if __name__ == '__main__':
    try:
        import mirtask.cliutil
    except ImportError:
        pass
    cmdline (sys.argv)
